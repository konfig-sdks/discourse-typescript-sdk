/* tslint:disable */
/* eslint-disable */
/*
Discourse API Documentation

This page contains the documentation on how to use Discourse through API calls.

> Note: For any endpoints not listed you can follow the
[reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576)
guide to figure out how to use an API endpoint.

### Request Content-Type

The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`,
`multipart/form-data`, or `application/json`.

### Endpoint Names and Response Content-Type

Most API endpoints provide the same content as their HTML counterparts. For example
the URL `/categories` serves a list of categories, the `/categories.json` API provides the
same information in JSON format.

Instead of sending API requests to `/categories.json` you may also send them to `/categories`
and add an `Accept: application/json` header to the request to get the JSON response.
Sending requests with the `Accept` header is necessary if you want to use URLs
for related endpoints returned by the API, such as pagination URLs.
These URLs are returned without the `.json` prefix so you need to add the header in
order to get the correct response format.

### Authentication

Some endpoints do not require any authentication, pretty much anything else will
require you to be authenticated.

To become authenticated you will need to create an API Key from the admin panel.

Once you have your API Key you can pass it in along with your API Username
as an HTTP header like this:

```
curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\
-H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\
-H \"Api-Username: system\"
```

and this is how POST requests will look:

```
curl -X POST \"http://127.0.0.1:3000/categories\" \\
-H \"Content-Type: multipart/form-data;\" \\
-H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\
-H \"Api-Username: system\" \\
-F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\
-F \"color=49d9e9\" \\
-F \"text_color=f0fcfd\"
```

### Boolean values

If an endpoint accepts a boolean be sure to specify it as a lowercase
`true` or `false` value unless noted otherwise.


The version of the OpenAPI document: latest


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { UsersActivateUserResponse } from '../models';
// @ts-ignore
import { UsersAnonymizeByIdJsonResponse } from '../models';
// @ts-ignore
import { UsersDeactivateUserResponse } from '../models';
// @ts-ignore
import { UsersDeleteUserByIdJsonRequest } from '../models';
// @ts-ignore
import { UsersDeleteUserByIdJsonResponse } from '../models';
// @ts-ignore
import { UsersGetListOfUsersResponseInner } from '../models';
// @ts-ignore
import { UsersGetUserByIdJsonResponse } from '../models';
// @ts-ignore
import { UsersLogOutUserActionResponse } from '../models';
// @ts-ignore
import { UsersRefreshGravatarPostResponse } from '../models';
// @ts-ignore
import { UsersSilenceByIdRequest } from '../models';
// @ts-ignore
import { UsersSilenceByIdResponse } from '../models';
// @ts-ignore
import { UsersSuspendByIdJsonRequest } from '../models';
// @ts-ignore
import { UsersSuspendByIdJsonResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Activate a user
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('activateUser', 'id', id)
            const localVarPath = `/admin/users/{id}/activate.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/users/{id}/activate.json',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Anonymize a user
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        anonymizeByIdJson: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('anonymizeByIdJson', 'id', id)
            const localVarPath = `/admin/users/{id}/anonymize.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/users/{id}/anonymize.json',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deactivate a user
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivateUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deactivateUser', 'id', id)
            const localVarPath = `/admin/users/{id}/deactivate.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/users/{id}/deactivate.json',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a user
         * @param {number} id 
         * @param {UsersDeleteUserByIdJsonRequest} [usersDeleteUserByIdJsonRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserByIdJson: async (id: number, usersDeleteUserByIdJsonRequest?: UsersDeleteUserByIdJsonRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUserByIdJson', 'id', id)
            const localVarPath = `/admin/users/{id}.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersDeleteUserByIdJsonRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/users/{id}.json',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersDeleteUserByIdJsonRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of users
         * @param {'active' | 'new' | 'staff' | 'suspended' | 'blocked' | 'suspect'} flag 
         * @param {'created' | 'last_emailed' | 'seen' | 'username' | 'email' | 'trust_level' | 'days_visited' | 'posts_read' | 'topics_viewed' | 'posts' | 'read_time'} [order] 
         * @param {'true'} [asc] 
         * @param {number} [page] 
         * @param {boolean} [showEmails] Include user email addresses in response. These requests will be logged in the staff action logs.
         * @param {boolean} [stats] Include user stats information
         * @param {string} [email] Filter to the user with this email address
         * @param {string} [ip] Filter to users with this IP address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListOfUsers: async (flag: 'active' | 'new' | 'staff' | 'suspended' | 'blocked' | 'suspect', order?: 'created' | 'last_emailed' | 'seen' | 'username' | 'email' | 'trust_level' | 'days_visited' | 'posts_read' | 'topics_viewed' | 'posts' | 'read_time', asc?: 'true', page?: number, showEmails?: boolean, stats?: boolean, email?: string, ip?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flag' is not null or undefined
            assertParamExists('getListOfUsers', 'flag', flag)
            const localVarPath = `/admin/users/list/{flag}.json`
                .replace(`{${"flag"}}`, encodeURIComponent(String(flag !== undefined ? flag : `-flag-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (asc !== undefined) {
                localVarQueryParameter['asc'] = asc;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (showEmails !== undefined) {
                localVarQueryParameter['show_emails'] = showEmails;
            }

            if (stats !== undefined) {
                localVarQueryParameter['stats'] = stats;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/users/list/{flag}.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByIdJson: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserByIdJson', 'id', id)
            const localVarPath = `/admin/users/{id}.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/users/{id}.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Log a user out
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logOutUserAction: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logOutUserAction', 'id', id)
            const localVarPath = `/admin/users/{id}/log_out.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/users/{id}/log_out.json',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh gravatar
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshGravatarPost: async (username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('refreshGravatarPost', 'username', username)
            const localVarPath = `/user_avatar/{username}/refresh_gravatar.json`
                .replace(`{${"username"}}`, encodeURIComponent(String(username !== undefined ? username : `-username-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/user_avatar/{username}/refresh_gravatar.json',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Silence a user
         * @param {number} id 
         * @param {UsersSilenceByIdRequest} [usersSilenceByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        silenceById: async (id: number, usersSilenceByIdRequest?: UsersSilenceByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('silenceById', 'id', id)
            const localVarPath = `/admin/users/{id}/silence.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersSilenceByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/users/{id}/silence.json',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersSilenceByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Suspend a user
         * @param {number} id 
         * @param {UsersSuspendByIdJsonRequest} [usersSuspendByIdJsonRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suspendByIdJson: async (id: number, usersSuspendByIdJsonRequest?: UsersSuspendByIdJsonRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('suspendByIdJson', 'id', id)
            const localVarPath = `/admin/users/{id}/suspend.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersSuspendByIdJsonRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/users/{id}/suspend.json',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersSuspendByIdJsonRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Activate a user
         * @param {AdminApiActivateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activateUser(requestParameters: AdminApiActivateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersActivateUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activateUser(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Anonymize a user
         * @param {AdminApiAnonymizeByIdJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async anonymizeByIdJson(requestParameters: AdminApiAnonymizeByIdJsonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersAnonymizeByIdJsonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.anonymizeByIdJson(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deactivate a user
         * @param {AdminApiDeactivateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deactivateUser(requestParameters: AdminApiDeactivateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersDeactivateUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deactivateUser(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a user
         * @param {AdminApiDeleteUserByIdJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserByIdJson(requestParameters: AdminApiDeleteUserByIdJsonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersDeleteUserByIdJsonResponse>> {
            const usersDeleteUserByIdJsonRequest: UsersDeleteUserByIdJsonRequest = {
                delete_posts: requestParameters.delete_posts,
                block_email: requestParameters.block_email,
                block_urls: requestParameters.block_urls,
                block_ip: requestParameters.block_ip
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserByIdJson(requestParameters.id, usersDeleteUserByIdJsonRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of users
         * @param {AdminApiGetListOfUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListOfUsers(requestParameters: AdminApiGetListOfUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<UsersGetListOfUsersResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListOfUsers(requestParameters.flag, requestParameters.order, requestParameters.asc, requestParameters.page, requestParameters.showEmails, requestParameters.stats, requestParameters.email, requestParameters.ip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a user by id
         * @param {AdminApiGetUserByIdJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByIdJson(requestParameters: AdminApiGetUserByIdJsonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersGetUserByIdJsonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByIdJson(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Log a user out
         * @param {AdminApiLogOutUserActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logOutUserAction(requestParameters: AdminApiLogOutUserActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersLogOutUserActionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logOutUserAction(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Refresh gravatar
         * @param {AdminApiRefreshGravatarPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshGravatarPost(requestParameters: AdminApiRefreshGravatarPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersRefreshGravatarPostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshGravatarPost(requestParameters.username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Silence a user
         * @param {AdminApiSilenceByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async silenceById(requestParameters: AdminApiSilenceByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersSilenceByIdResponse>> {
            const usersSilenceByIdRequest: UsersSilenceByIdRequest = {
                silenced_till: requestParameters.silenced_till,
                reason: requestParameters.reason,
                message: requestParameters.message,
                post_action: requestParameters.post_action
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.silenceById(requestParameters.id, usersSilenceByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Suspend a user
         * @param {AdminApiSuspendByIdJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suspendByIdJson(requestParameters: AdminApiSuspendByIdJsonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersSuspendByIdJsonResponse>> {
            const usersSuspendByIdJsonRequest: UsersSuspendByIdJsonRequest = {
                suspend_until: requestParameters.suspend_until,
                reason: requestParameters.reason,
                message: requestParameters.message,
                post_action: requestParameters.post_action
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.suspendByIdJson(requestParameters.id, usersSuspendByIdJsonRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * 
         * @summary Activate a user
         * @param {AdminApiActivateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateUser(requestParameters: AdminApiActivateUserRequest, options?: AxiosRequestConfig): AxiosPromise<UsersActivateUserResponse> {
            return localVarFp.activateUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Anonymize a user
         * @param {AdminApiAnonymizeByIdJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        anonymizeByIdJson(requestParameters: AdminApiAnonymizeByIdJsonRequest, options?: AxiosRequestConfig): AxiosPromise<UsersAnonymizeByIdJsonResponse> {
            return localVarFp.anonymizeByIdJson(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deactivate a user
         * @param {AdminApiDeactivateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivateUser(requestParameters: AdminApiDeactivateUserRequest, options?: AxiosRequestConfig): AxiosPromise<UsersDeactivateUserResponse> {
            return localVarFp.deactivateUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a user
         * @param {AdminApiDeleteUserByIdJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserByIdJson(requestParameters: AdminApiDeleteUserByIdJsonRequest, options?: AxiosRequestConfig): AxiosPromise<UsersDeleteUserByIdJsonResponse> {
            return localVarFp.deleteUserByIdJson(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of users
         * @param {AdminApiGetListOfUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListOfUsers(requestParameters: AdminApiGetListOfUsersRequest, options?: AxiosRequestConfig): AxiosPromise<Set<UsersGetListOfUsersResponseInner>> {
            return localVarFp.getListOfUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a user by id
         * @param {AdminApiGetUserByIdJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByIdJson(requestParameters: AdminApiGetUserByIdJsonRequest, options?: AxiosRequestConfig): AxiosPromise<UsersGetUserByIdJsonResponse> {
            return localVarFp.getUserByIdJson(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Log a user out
         * @param {AdminApiLogOutUserActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logOutUserAction(requestParameters: AdminApiLogOutUserActionRequest, options?: AxiosRequestConfig): AxiosPromise<UsersLogOutUserActionResponse> {
            return localVarFp.logOutUserAction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refresh gravatar
         * @param {AdminApiRefreshGravatarPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshGravatarPost(requestParameters: AdminApiRefreshGravatarPostRequest, options?: AxiosRequestConfig): AxiosPromise<UsersRefreshGravatarPostResponse> {
            return localVarFp.refreshGravatarPost(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Silence a user
         * @param {AdminApiSilenceByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        silenceById(requestParameters: AdminApiSilenceByIdRequest, options?: AxiosRequestConfig): AxiosPromise<UsersSilenceByIdResponse> {
            return localVarFp.silenceById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Suspend a user
         * @param {AdminApiSuspendByIdJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suspendByIdJson(requestParameters: AdminApiSuspendByIdJsonRequest, options?: AxiosRequestConfig): AxiosPromise<UsersSuspendByIdJsonResponse> {
            return localVarFp.suspendByIdJson(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for activateUser operation in AdminApi.
 * @export
 * @interface AdminApiActivateUserRequest
 */
export type AdminApiActivateUserRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof AdminApiActivateUser
    */
    readonly id: number
    
}

/**
 * Request parameters for anonymizeByIdJson operation in AdminApi.
 * @export
 * @interface AdminApiAnonymizeByIdJsonRequest
 */
export type AdminApiAnonymizeByIdJsonRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof AdminApiAnonymizeByIdJson
    */
    readonly id: number
    
}

/**
 * Request parameters for deactivateUser operation in AdminApi.
 * @export
 * @interface AdminApiDeactivateUserRequest
 */
export type AdminApiDeactivateUserRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof AdminApiDeactivateUser
    */
    readonly id: number
    
}

/**
 * Request parameters for deleteUserByIdJson operation in AdminApi.
 * @export
 * @interface AdminApiDeleteUserByIdJsonRequest
 */
export type AdminApiDeleteUserByIdJsonRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof AdminApiDeleteUserByIdJson
    */
    readonly id: number
    
} & UsersDeleteUserByIdJsonRequest

/**
 * Request parameters for getListOfUsers operation in AdminApi.
 * @export
 * @interface AdminApiGetListOfUsersRequest
 */
export type AdminApiGetListOfUsersRequest = {
    
    /**
    * 
    * @type {'active' | 'new' | 'staff' | 'suspended' | 'blocked' | 'suspect'}
    * @memberof AdminApiGetListOfUsers
    */
    readonly flag: 'active' | 'new' | 'staff' | 'suspended' | 'blocked' | 'suspect'
    
    /**
    * 
    * @type {'created' | 'last_emailed' | 'seen' | 'username' | 'email' | 'trust_level' | 'days_visited' | 'posts_read' | 'topics_viewed' | 'posts' | 'read_time'}
    * @memberof AdminApiGetListOfUsers
    */
    readonly order?: 'created' | 'last_emailed' | 'seen' | 'username' | 'email' | 'trust_level' | 'days_visited' | 'posts_read' | 'topics_viewed' | 'posts' | 'read_time'
    
    /**
    * 
    * @type {'true'}
    * @memberof AdminApiGetListOfUsers
    */
    readonly asc?: 'true'
    
    /**
    * 
    * @type {number}
    * @memberof AdminApiGetListOfUsers
    */
    readonly page?: number
    
    /**
    * Include user email addresses in response. These requests will be logged in the staff action logs.
    * @type {boolean}
    * @memberof AdminApiGetListOfUsers
    */
    readonly showEmails?: boolean
    
    /**
    * Include user stats information
    * @type {boolean}
    * @memberof AdminApiGetListOfUsers
    */
    readonly stats?: boolean
    
    /**
    * Filter to the user with this email address
    * @type {string}
    * @memberof AdminApiGetListOfUsers
    */
    readonly email?: string
    
    /**
    * Filter to users with this IP address
    * @type {string}
    * @memberof AdminApiGetListOfUsers
    */
    readonly ip?: string
    
}

/**
 * Request parameters for getUserByIdJson operation in AdminApi.
 * @export
 * @interface AdminApiGetUserByIdJsonRequest
 */
export type AdminApiGetUserByIdJsonRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof AdminApiGetUserByIdJson
    */
    readonly id: number
    
}

/**
 * Request parameters for logOutUserAction operation in AdminApi.
 * @export
 * @interface AdminApiLogOutUserActionRequest
 */
export type AdminApiLogOutUserActionRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof AdminApiLogOutUserAction
    */
    readonly id: number
    
}

/**
 * Request parameters for refreshGravatarPost operation in AdminApi.
 * @export
 * @interface AdminApiRefreshGravatarPostRequest
 */
export type AdminApiRefreshGravatarPostRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AdminApiRefreshGravatarPost
    */
    readonly username: string
    
}

/**
 * Request parameters for silenceById operation in AdminApi.
 * @export
 * @interface AdminApiSilenceByIdRequest
 */
export type AdminApiSilenceByIdRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof AdminApiSilenceById
    */
    readonly id: number
    
} & UsersSilenceByIdRequest

/**
 * Request parameters for suspendByIdJson operation in AdminApi.
 * @export
 * @interface AdminApiSuspendByIdJsonRequest
 */
export type AdminApiSuspendByIdJsonRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof AdminApiSuspendByIdJson
    */
    readonly id: number
    
} & UsersSuspendByIdJsonRequest

/**
 * AdminApiGenerated - object-oriented interface
 * @export
 * @class AdminApiGenerated
 * @extends {BaseAPI}
 */
export class AdminApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Activate a user
     * @param {AdminApiActivateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiGenerated
     */
    public activateUser(requestParameters: AdminApiActivateUserRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).activateUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Anonymize a user
     * @param {AdminApiAnonymizeByIdJsonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiGenerated
     */
    public anonymizeByIdJson(requestParameters: AdminApiAnonymizeByIdJsonRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).anonymizeByIdJson(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deactivate a user
     * @param {AdminApiDeactivateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiGenerated
     */
    public deactivateUser(requestParameters: AdminApiDeactivateUserRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).deactivateUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a user
     * @param {AdminApiDeleteUserByIdJsonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiGenerated
     */
    public deleteUserByIdJson(requestParameters: AdminApiDeleteUserByIdJsonRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).deleteUserByIdJson(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of users
     * @param {AdminApiGetListOfUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiGenerated
     */
    public getListOfUsers(requestParameters: AdminApiGetListOfUsersRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).getListOfUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a user by id
     * @param {AdminApiGetUserByIdJsonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiGenerated
     */
    public getUserByIdJson(requestParameters: AdminApiGetUserByIdJsonRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).getUserByIdJson(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Log a user out
     * @param {AdminApiLogOutUserActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiGenerated
     */
    public logOutUserAction(requestParameters: AdminApiLogOutUserActionRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).logOutUserAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refresh gravatar
     * @param {AdminApiRefreshGravatarPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiGenerated
     */
    public refreshGravatarPost(requestParameters: AdminApiRefreshGravatarPostRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).refreshGravatarPost(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Silence a user
     * @param {AdminApiSilenceByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiGenerated
     */
    public silenceById(requestParameters: AdminApiSilenceByIdRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).silenceById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Suspend a user
     * @param {AdminApiSuspendByIdJsonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiGenerated
     */
    public suspendByIdJson(requestParameters: AdminApiSuspendByIdJsonRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).suspendByIdJson(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
