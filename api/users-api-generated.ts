/* tslint:disable */
/* eslint-disable */
/*
Discourse API Documentation

This page contains the documentation on how to use Discourse through API calls.

> Note: For any endpoints not listed you can follow the
[reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576)
guide to figure out how to use an API endpoint.

### Request Content-Type

The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`,
`multipart/form-data`, or `application/json`.

### Endpoint Names and Response Content-Type

Most API endpoints provide the same content as their HTML counterparts. For example
the URL `/categories` serves a list of categories, the `/categories.json` API provides the
same information in JSON format.

Instead of sending API requests to `/categories.json` you may also send them to `/categories`
and add an `Accept: application/json` header to the request to get the JSON response.
Sending requests with the `Accept` header is necessary if you want to use URLs
for related endpoints returned by the API, such as pagination URLs.
These URLs are returned without the `.json` prefix so you need to add the header in
order to get the correct response format.

### Authentication

Some endpoints do not require any authentication, pretty much anything else will
require you to be authenticated.

To become authenticated you will need to create an API Key from the admin panel.

Once you have your API Key you can pass it in along with your API Username
as an HTTP header like this:

```
curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\
-H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\
-H \"Api-Username: system\"
```

and this is how POST requests will look:

```
curl -X POST \"http://127.0.0.1:3000/categories\" \\
-H \"Content-Type: multipart/form-data;\" \\
-H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\
-H \"Api-Username: system\" \\
-F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\
-F \"color=49d9e9\" \\
-F \"text_color=f0fcfd\"
```

### Boolean values

If an endpoint accepts a boolean be sure to specify it as a lowercase
`true` or `false` value unless noted otherwise.


The version of the OpenAPI document: latest


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadgesListUserBadgesResponse } from '../models';
// @ts-ignore
import { UsersActivateUserResponse } from '../models';
// @ts-ignore
import { UsersAnonymizeByIdJsonResponse } from '../models';
// @ts-ignore
import { UsersChangePasswordActionRequest } from '../models';
// @ts-ignore
import { UsersCreateUserRequest } from '../models';
// @ts-ignore
import { UsersCreateUserResponse } from '../models';
// @ts-ignore
import { UsersDeactivateUserResponse } from '../models';
// @ts-ignore
import { UsersDeleteUserByIdJsonRequest } from '../models';
// @ts-ignore
import { UsersDeleteUserByIdJsonResponse } from '../models';
// @ts-ignore
import { UsersGetEmailsResponse } from '../models';
// @ts-ignore
import { UsersGetIdentityProviderExternalIdResponse } from '../models';
// @ts-ignore
import { UsersGetListOfUsersResponseInner } from '../models';
// @ts-ignore
import { UsersGetUserByExternalIdResponse } from '../models';
// @ts-ignore
import { UsersGetUserByIdJsonResponse } from '../models';
// @ts-ignore
import { UsersGetUserByUsernameResponse } from '../models';
// @ts-ignore
import { UsersListPublicUserResponse } from '../models';
// @ts-ignore
import { UsersListUserActionsResponse } from '../models';
// @ts-ignore
import { UsersLogOutUserActionResponse } from '../models';
// @ts-ignore
import { UsersRefreshGravatarPostResponse } from '../models';
// @ts-ignore
import { UsersSendPasswordResetEmailRequest } from '../models';
// @ts-ignore
import { UsersSendPasswordResetEmailResponse } from '../models';
// @ts-ignore
import { UsersSilenceByIdRequest } from '../models';
// @ts-ignore
import { UsersSilenceByIdResponse } from '../models';
// @ts-ignore
import { UsersSuspendByIdJsonRequest } from '../models';
// @ts-ignore
import { UsersSuspendByIdJsonResponse } from '../models';
// @ts-ignore
import { UsersUpdateAvatarRequest } from '../models';
// @ts-ignore
import { UsersUpdateAvatarResponse } from '../models';
// @ts-ignore
import { UsersUpdateEmailPreferencesRequest } from '../models';
// @ts-ignore
import { UsersUpdatePreferencesJsonRequest } from '../models';
// @ts-ignore
import { UsersUpdateUserDetailsRequest } from '../models';
// @ts-ignore
import { UsersUpdateUserDetailsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Activate a user
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('activateUser', 'id', id)
            const localVarPath = `/admin/users/{id}/activate.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/users/{id}/activate.json',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Anonymize a user
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        anonymizeByIdJson: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('anonymizeByIdJson', 'id', id)
            const localVarPath = `/admin/users/{id}/anonymize.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/users/{id}/anonymize.json',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change password
         * @param {string} token 
         * @param {UsersChangePasswordActionRequest} [usersChangePasswordActionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePasswordAction: async (token: string, usersChangePasswordActionRequest?: UsersChangePasswordActionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('changePasswordAction', 'token', token)
            const localVarPath = `/users/password-reset/{token}.json`
                .replace(`{${"token"}}`, encodeURIComponent(String(token !== undefined ? token : `-token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersChangePasswordActionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/password-reset/{token}.json',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersChangePasswordActionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a user
         * @param {string} apiKey 
         * @param {string} apiUsername 
         * @param {UsersCreateUserRequest} [usersCreateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (apiKey: string, apiUsername: string, usersCreateUserRequest?: UsersCreateUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('createUser', 'apiKey', apiKey)
            // verify required parameter 'apiUsername' is not null or undefined
            assertParamExists('createUser', 'apiUsername', apiUsername)
            const localVarPath = `/users.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['Api-Key'] = String(apiKey);
            }

            if (apiUsername != null) {
                localVarHeaderParameter['Api-Username'] = String(apiUsername);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersCreateUserRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users.json',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersCreateUserRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deactivate a user
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivateUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deactivateUser', 'id', id)
            const localVarPath = `/admin/users/{id}/deactivate.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/users/{id}/deactivate.json',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a user
         * @param {number} id 
         * @param {UsersDeleteUserByIdJsonRequest} [usersDeleteUserByIdJsonRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserByIdJson: async (id: number, usersDeleteUserByIdJsonRequest?: UsersDeleteUserByIdJsonRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUserByIdJson', 'id', id)
            const localVarPath = `/admin/users/{id}.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersDeleteUserByIdJsonRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/users/{id}.json',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersDeleteUserByIdJsonRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get email addresses belonging to a user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmails: async (username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getEmails', 'username', username)
            const localVarPath = `/u/{username}/emails.json`
                .replace(`{${"username"}}`, encodeURIComponent(String(username !== undefined ? username : `-username-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/u/{username}/emails.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user by identity provider external ID
         * @param {string} apiKey 
         * @param {string} apiUsername 
         * @param {string} provider Authentication provider name. Can be found in the provider callback URL: &#x60;/auth/{provider}/callback&#x60;
         * @param {string} externalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityProviderExternalId: async (apiKey: string, apiUsername: string, provider: string, externalId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('getIdentityProviderExternalId', 'apiKey', apiKey)
            // verify required parameter 'apiUsername' is not null or undefined
            assertParamExists('getIdentityProviderExternalId', 'apiUsername', apiUsername)
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('getIdentityProviderExternalId', 'provider', provider)
            // verify required parameter 'externalId' is not null or undefined
            assertParamExists('getIdentityProviderExternalId', 'externalId', externalId)
            const localVarPath = `/u/by-external/{provider}/{external_id}.json`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider !== undefined ? provider : `-provider-`)))
                .replace(`{${"external_id"}}`, encodeURIComponent(String(externalId !== undefined ? externalId : `-external_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['Api-Key'] = String(apiKey);
            }

            if (apiUsername != null) {
                localVarHeaderParameter['Api-Username'] = String(apiUsername);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/u/by-external/{provider}/{external_id}.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of users
         * @param {'active' | 'new' | 'staff' | 'suspended' | 'blocked' | 'suspect'} flag 
         * @param {'created' | 'last_emailed' | 'seen' | 'username' | 'email' | 'trust_level' | 'days_visited' | 'posts_read' | 'topics_viewed' | 'posts' | 'read_time'} [order] 
         * @param {'true'} [asc] 
         * @param {number} [page] 
         * @param {boolean} [showEmails] Include user email addresses in response. These requests will be logged in the staff action logs.
         * @param {boolean} [stats] Include user stats information
         * @param {string} [email] Filter to the user with this email address
         * @param {string} [ip] Filter to users with this IP address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListOfUsers: async (flag: 'active' | 'new' | 'staff' | 'suspended' | 'blocked' | 'suspect', order?: 'created' | 'last_emailed' | 'seen' | 'username' | 'email' | 'trust_level' | 'days_visited' | 'posts_read' | 'topics_viewed' | 'posts' | 'read_time', asc?: 'true', page?: number, showEmails?: boolean, stats?: boolean, email?: string, ip?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flag' is not null or undefined
            assertParamExists('getListOfUsers', 'flag', flag)
            const localVarPath = `/admin/users/list/{flag}.json`
                .replace(`{${"flag"}}`, encodeURIComponent(String(flag !== undefined ? flag : `-flag-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (asc !== undefined) {
                localVarQueryParameter['asc'] = asc;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (showEmails !== undefined) {
                localVarQueryParameter['show_emails'] = showEmails;
            }

            if (stats !== undefined) {
                localVarQueryParameter['stats'] = stats;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/users/list/{flag}.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user by external_id
         * @param {string} apiKey 
         * @param {string} apiUsername 
         * @param {string} externalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByExternalId: async (apiKey: string, apiUsername: string, externalId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('getUserByExternalId', 'apiKey', apiKey)
            // verify required parameter 'apiUsername' is not null or undefined
            assertParamExists('getUserByExternalId', 'apiUsername', apiUsername)
            // verify required parameter 'externalId' is not null or undefined
            assertParamExists('getUserByExternalId', 'externalId', externalId)
            const localVarPath = `/u/by-external/{external_id}.json`
                .replace(`{${"external_id"}}`, encodeURIComponent(String(externalId !== undefined ? externalId : `-external_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['Api-Key'] = String(apiKey);
            }

            if (apiUsername != null) {
                localVarHeaderParameter['Api-Username'] = String(apiUsername);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/u/by-external/{external_id}.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByIdJson: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserByIdJson', 'id', id)
            const localVarPath = `/admin/users/{id}.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/users/{id}.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a single user by username
         * @param {string} apiKey 
         * @param {string} apiUsername 
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByUsername: async (apiKey: string, apiUsername: string, username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('getUserByUsername', 'apiKey', apiKey)
            // verify required parameter 'apiUsername' is not null or undefined
            assertParamExists('getUserByUsername', 'apiUsername', apiUsername)
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getUserByUsername', 'username', username)
            const localVarPath = `/u/{username}.json`
                .replace(`{${"username"}}`, encodeURIComponent(String(username !== undefined ? username : `-username-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['Api-Key'] = String(apiKey);
            }

            if (apiUsername != null) {
                localVarHeaderParameter['Api-Username'] = String(apiUsername);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/u/{username}.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a public list of users
         * @param {'daily' | 'weekly' | 'monthly' | 'quarterly' | 'yearly' | 'all'} period 
         * @param {'likes_received' | 'likes_given' | 'topic_count' | 'post_count' | 'topics_entered' | 'posts_read' | 'days_visited'} order 
         * @param {'true'} [asc] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPublicUser: async (period: 'daily' | 'weekly' | 'monthly' | 'quarterly' | 'yearly' | 'all', order: 'likes_received' | 'likes_given' | 'topic_count' | 'post_count' | 'topics_entered' | 'posts_read' | 'days_visited', asc?: 'true', page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'period' is not null or undefined
            assertParamExists('listPublicUser', 'period', period)
            // verify required parameter 'order' is not null or undefined
            assertParamExists('listPublicUser', 'order', order)
            const localVarPath = `/directory_items.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (asc !== undefined) {
                localVarQueryParameter['asc'] = asc;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/directory_items.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of user actions
         * @param {number} offset 
         * @param {string} username 
         * @param {string} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserActions: async (offset: number, username: string, filter: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('listUserActions', 'offset', offset)
            // verify required parameter 'username' is not null or undefined
            assertParamExists('listUserActions', 'username', username)
            // verify required parameter 'filter' is not null or undefined
            assertParamExists('listUserActions', 'filter', filter)
            const localVarPath = `/user_actions.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/user_actions.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List badges for a user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserBadges: async (username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('listUserBadges', 'username', username)
            const localVarPath = `/user-badges/{username}.json`
                .replace(`{${"username"}}`, encodeURIComponent(String(username !== undefined ? username : `-username-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/user-badges/{username}.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Log a user out
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logOutUserAction: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logOutUserAction', 'id', id)
            const localVarPath = `/admin/users/{id}/log_out.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/users/{id}/log_out.json',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh gravatar
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshGravatarPost: async (username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('refreshGravatarPost', 'username', username)
            const localVarPath = `/user_avatar/{username}/refresh_gravatar.json`
                .replace(`{${"username"}}`, encodeURIComponent(String(username !== undefined ? username : `-username-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/user_avatar/{username}/refresh_gravatar.json',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send password reset email
         * @param {UsersSendPasswordResetEmailRequest} [usersSendPasswordResetEmailRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPasswordResetEmail: async (usersSendPasswordResetEmailRequest?: UsersSendPasswordResetEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/session/forgot_password.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersSendPasswordResetEmailRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/session/forgot_password.json',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersSendPasswordResetEmailRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Silence a user
         * @param {number} id 
         * @param {UsersSilenceByIdRequest} [usersSilenceByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        silenceById: async (id: number, usersSilenceByIdRequest?: UsersSilenceByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('silenceById', 'id', id)
            const localVarPath = `/admin/users/{id}/silence.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersSilenceByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/users/{id}/silence.json',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersSilenceByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Suspend a user
         * @param {number} id 
         * @param {UsersSuspendByIdJsonRequest} [usersSuspendByIdJsonRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suspendByIdJson: async (id: number, usersSuspendByIdJsonRequest?: UsersSuspendByIdJsonRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('suspendByIdJson', 'id', id)
            const localVarPath = `/admin/users/{id}/suspend.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersSuspendByIdJsonRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/users/{id}/suspend.json',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersSuspendByIdJsonRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update avatar
         * @param {string} username 
         * @param {UsersUpdateAvatarRequest} [usersUpdateAvatarRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAvatar: async (username: string, usersUpdateAvatarRequest?: UsersUpdateAvatarRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('updateAvatar', 'username', username)
            const localVarPath = `/u/{username}/preferences/avatar/pick.json`
                .replace(`{${"username"}}`, encodeURIComponent(String(username !== undefined ? username : `-username-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersUpdateAvatarRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/u/{username}/preferences/avatar/pick.json',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersUpdateAvatarRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update email
         * @param {string} username 
         * @param {UsersUpdateEmailPreferencesRequest} [usersUpdateEmailPreferencesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailPreferences: async (username: string, usersUpdateEmailPreferencesRequest?: UsersUpdateEmailPreferencesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('updateEmailPreferences', 'username', username)
            const localVarPath = `/u/{username}/preferences/email.json`
                .replace(`{${"username"}}`, encodeURIComponent(String(username !== undefined ? username : `-username-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersUpdateEmailPreferencesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/u/{username}/preferences/email.json',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersUpdateEmailPreferencesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update username
         * @param {string} username 
         * @param {UsersUpdatePreferencesJsonRequest} [usersUpdatePreferencesJsonRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePreferencesJson: async (username: string, usersUpdatePreferencesJsonRequest?: UsersUpdatePreferencesJsonRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('updatePreferencesJson', 'username', username)
            const localVarPath = `/u/{username}/preferences/username.json`
                .replace(`{${"username"}}`, encodeURIComponent(String(username !== undefined ? username : `-username-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersUpdatePreferencesJsonRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/u/{username}/preferences/username.json',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersUpdatePreferencesJsonRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a user
         * @param {string} apiKey 
         * @param {string} apiUsername 
         * @param {string} username 
         * @param {UsersUpdateUserDetailsRequest} [usersUpdateUserDetailsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserDetails: async (apiKey: string, apiUsername: string, username: string, usersUpdateUserDetailsRequest?: UsersUpdateUserDetailsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('updateUserDetails', 'apiKey', apiKey)
            // verify required parameter 'apiUsername' is not null or undefined
            assertParamExists('updateUserDetails', 'apiUsername', apiUsername)
            // verify required parameter 'username' is not null or undefined
            assertParamExists('updateUserDetails', 'username', username)
            const localVarPath = `/u/{username}.json`
                .replace(`{${"username"}}`, encodeURIComponent(String(username !== undefined ? username : `-username-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['Api-Key'] = String(apiKey);
            }

            if (apiUsername != null) {
                localVarHeaderParameter['Api-Username'] = String(apiUsername);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersUpdateUserDetailsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/u/{username}.json',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersUpdateUserDetailsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Activate a user
         * @param {UsersApiActivateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activateUser(requestParameters: UsersApiActivateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersActivateUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activateUser(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Anonymize a user
         * @param {UsersApiAnonymizeByIdJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async anonymizeByIdJson(requestParameters: UsersApiAnonymizeByIdJsonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersAnonymizeByIdJsonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.anonymizeByIdJson(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Change password
         * @param {UsersApiChangePasswordActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePasswordAction(requestParameters: UsersApiChangePasswordActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const usersChangePasswordActionRequest: UsersChangePasswordActionRequest = {
                username: requestParameters.username,
                password: requestParameters.password
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePasswordAction(requestParameters.token, usersChangePasswordActionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a user
         * @param {UsersApiCreateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(requestParameters: UsersApiCreateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersCreateUserResponse>> {
            const usersCreateUserRequest: UsersCreateUserRequest = {
                name: requestParameters.name,
                email: requestParameters.email,
                password: requestParameters.password,
                username: requestParameters.username,
                active: requestParameters.active,
                approved: requestParameters.approved,
                user_fields[1]: requestParameters.user_fields[1],
                external_ids: requestParameters.external_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(requestParameters.apiKey, requestParameters.apiUsername, usersCreateUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deactivate a user
         * @param {UsersApiDeactivateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deactivateUser(requestParameters: UsersApiDeactivateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersDeactivateUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deactivateUser(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a user
         * @param {UsersApiDeleteUserByIdJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserByIdJson(requestParameters: UsersApiDeleteUserByIdJsonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersDeleteUserByIdJsonResponse>> {
            const usersDeleteUserByIdJsonRequest: UsersDeleteUserByIdJsonRequest = {
                delete_posts: requestParameters.delete_posts,
                block_email: requestParameters.block_email,
                block_urls: requestParameters.block_urls,
                block_ip: requestParameters.block_ip
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserByIdJson(requestParameters.id, usersDeleteUserByIdJsonRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get email addresses belonging to a user
         * @param {UsersApiGetEmailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmails(requestParameters: UsersApiGetEmailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersGetEmailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmails(requestParameters.username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a user by identity provider external ID
         * @param {UsersApiGetIdentityProviderExternalIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIdentityProviderExternalId(requestParameters: UsersApiGetIdentityProviderExternalIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersGetIdentityProviderExternalIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIdentityProviderExternalId(requestParameters.apiKey, requestParameters.apiUsername, requestParameters.provider, requestParameters.externalId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of users
         * @param {UsersApiGetListOfUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListOfUsers(requestParameters: UsersApiGetListOfUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<UsersGetListOfUsersResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListOfUsers(requestParameters.flag, requestParameters.order, requestParameters.asc, requestParameters.page, requestParameters.showEmails, requestParameters.stats, requestParameters.email, requestParameters.ip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a user by external_id
         * @param {UsersApiGetUserByExternalIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByExternalId(requestParameters: UsersApiGetUserByExternalIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersGetUserByExternalIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByExternalId(requestParameters.apiKey, requestParameters.apiUsername, requestParameters.externalId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a user by id
         * @param {UsersApiGetUserByIdJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByIdJson(requestParameters: UsersApiGetUserByIdJsonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersGetUserByIdJsonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByIdJson(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a single user by username
         * @param {UsersApiGetUserByUsernameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByUsername(requestParameters: UsersApiGetUserByUsernameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersGetUserByUsernameResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByUsername(requestParameters.apiKey, requestParameters.apiUsername, requestParameters.username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a public list of users
         * @param {UsersApiListPublicUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPublicUser(requestParameters: UsersApiListPublicUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersListPublicUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPublicUser(requestParameters.period, requestParameters.order, requestParameters.asc, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of user actions
         * @param {UsersApiListUserActionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserActions(requestParameters: UsersApiListUserActionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersListUserActionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserActions(requestParameters.offset, requestParameters.username, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List badges for a user
         * @param {UsersApiListUserBadgesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserBadges(requestParameters: UsersApiListUserBadgesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BadgesListUserBadgesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserBadges(requestParameters.username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Log a user out
         * @param {UsersApiLogOutUserActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logOutUserAction(requestParameters: UsersApiLogOutUserActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersLogOutUserActionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logOutUserAction(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Refresh gravatar
         * @param {UsersApiRefreshGravatarPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshGravatarPost(requestParameters: UsersApiRefreshGravatarPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersRefreshGravatarPostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshGravatarPost(requestParameters.username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send password reset email
         * @param {UsersApiSendPasswordResetEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendPasswordResetEmail(requestParameters: UsersApiSendPasswordResetEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersSendPasswordResetEmailResponse>> {
            const usersSendPasswordResetEmailRequest: UsersSendPasswordResetEmailRequest = {
                login: requestParameters.login
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendPasswordResetEmail(usersSendPasswordResetEmailRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Silence a user
         * @param {UsersApiSilenceByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async silenceById(requestParameters: UsersApiSilenceByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersSilenceByIdResponse>> {
            const usersSilenceByIdRequest: UsersSilenceByIdRequest = {
                silenced_till: requestParameters.silenced_till,
                reason: requestParameters.reason,
                message: requestParameters.message,
                post_action: requestParameters.post_action
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.silenceById(requestParameters.id, usersSilenceByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Suspend a user
         * @param {UsersApiSuspendByIdJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suspendByIdJson(requestParameters: UsersApiSuspendByIdJsonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersSuspendByIdJsonResponse>> {
            const usersSuspendByIdJsonRequest: UsersSuspendByIdJsonRequest = {
                suspend_until: requestParameters.suspend_until,
                reason: requestParameters.reason,
                message: requestParameters.message,
                post_action: requestParameters.post_action
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.suspendByIdJson(requestParameters.id, usersSuspendByIdJsonRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update avatar
         * @param {UsersApiUpdateAvatarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAvatar(requestParameters: UsersApiUpdateAvatarRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersUpdateAvatarResponse>> {
            const usersUpdateAvatarRequest: UsersUpdateAvatarRequest = {
                upload_id: requestParameters.upload_id,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAvatar(requestParameters.username, usersUpdateAvatarRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update email
         * @param {UsersApiUpdateEmailPreferencesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmailPreferences(requestParameters: UsersApiUpdateEmailPreferencesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const usersUpdateEmailPreferencesRequest: UsersUpdateEmailPreferencesRequest = {
                email: requestParameters.email
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmailPreferences(requestParameters.username, usersUpdateEmailPreferencesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update username
         * @param {UsersApiUpdatePreferencesJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePreferencesJson(requestParameters: UsersApiUpdatePreferencesJsonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const usersUpdatePreferencesJsonRequest: UsersUpdatePreferencesJsonRequest = {
                new_username: requestParameters.new_username
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePreferencesJson(requestParameters.username, usersUpdatePreferencesJsonRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a user
         * @param {UsersApiUpdateUserDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserDetails(requestParameters: UsersApiUpdateUserDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersUpdateUserDetailsResponse>> {
            const usersUpdateUserDetailsRequest: UsersUpdateUserDetailsRequest = {
                name: requestParameters.name,
                external_ids: requestParameters.external_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserDetails(requestParameters.apiKey, requestParameters.apiUsername, requestParameters.username, usersUpdateUserDetailsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Activate a user
         * @param {UsersApiActivateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateUser(requestParameters: UsersApiActivateUserRequest, options?: AxiosRequestConfig): AxiosPromise<UsersActivateUserResponse> {
            return localVarFp.activateUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Anonymize a user
         * @param {UsersApiAnonymizeByIdJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        anonymizeByIdJson(requestParameters: UsersApiAnonymizeByIdJsonRequest, options?: AxiosRequestConfig): AxiosPromise<UsersAnonymizeByIdJsonResponse> {
            return localVarFp.anonymizeByIdJson(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change password
         * @param {UsersApiChangePasswordActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePasswordAction(requestParameters: UsersApiChangePasswordActionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.changePasswordAction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a user
         * @param {UsersApiCreateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(requestParameters: UsersApiCreateUserRequest, options?: AxiosRequestConfig): AxiosPromise<UsersCreateUserResponse> {
            return localVarFp.createUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deactivate a user
         * @param {UsersApiDeactivateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivateUser(requestParameters: UsersApiDeactivateUserRequest, options?: AxiosRequestConfig): AxiosPromise<UsersDeactivateUserResponse> {
            return localVarFp.deactivateUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a user
         * @param {UsersApiDeleteUserByIdJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserByIdJson(requestParameters: UsersApiDeleteUserByIdJsonRequest, options?: AxiosRequestConfig): AxiosPromise<UsersDeleteUserByIdJsonResponse> {
            return localVarFp.deleteUserByIdJson(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get email addresses belonging to a user
         * @param {UsersApiGetEmailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmails(requestParameters: UsersApiGetEmailsRequest, options?: AxiosRequestConfig): AxiosPromise<UsersGetEmailsResponse> {
            return localVarFp.getEmails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a user by identity provider external ID
         * @param {UsersApiGetIdentityProviderExternalIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityProviderExternalId(requestParameters: UsersApiGetIdentityProviderExternalIdRequest, options?: AxiosRequestConfig): AxiosPromise<UsersGetIdentityProviderExternalIdResponse> {
            return localVarFp.getIdentityProviderExternalId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of users
         * @param {UsersApiGetListOfUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListOfUsers(requestParameters: UsersApiGetListOfUsersRequest, options?: AxiosRequestConfig): AxiosPromise<Set<UsersGetListOfUsersResponseInner>> {
            return localVarFp.getListOfUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a user by external_id
         * @param {UsersApiGetUserByExternalIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByExternalId(requestParameters: UsersApiGetUserByExternalIdRequest, options?: AxiosRequestConfig): AxiosPromise<UsersGetUserByExternalIdResponse> {
            return localVarFp.getUserByExternalId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a user by id
         * @param {UsersApiGetUserByIdJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByIdJson(requestParameters: UsersApiGetUserByIdJsonRequest, options?: AxiosRequestConfig): AxiosPromise<UsersGetUserByIdJsonResponse> {
            return localVarFp.getUserByIdJson(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a single user by username
         * @param {UsersApiGetUserByUsernameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByUsername(requestParameters: UsersApiGetUserByUsernameRequest, options?: AxiosRequestConfig): AxiosPromise<UsersGetUserByUsernameResponse> {
            return localVarFp.getUserByUsername(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a public list of users
         * @param {UsersApiListPublicUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPublicUser(requestParameters: UsersApiListPublicUserRequest, options?: AxiosRequestConfig): AxiosPromise<UsersListPublicUserResponse> {
            return localVarFp.listPublicUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of user actions
         * @param {UsersApiListUserActionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserActions(requestParameters: UsersApiListUserActionsRequest, options?: AxiosRequestConfig): AxiosPromise<UsersListUserActionsResponse> {
            return localVarFp.listUserActions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List badges for a user
         * @param {UsersApiListUserBadgesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserBadges(requestParameters: UsersApiListUserBadgesRequest, options?: AxiosRequestConfig): AxiosPromise<BadgesListUserBadgesResponse> {
            return localVarFp.listUserBadges(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Log a user out
         * @param {UsersApiLogOutUserActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logOutUserAction(requestParameters: UsersApiLogOutUserActionRequest, options?: AxiosRequestConfig): AxiosPromise<UsersLogOutUserActionResponse> {
            return localVarFp.logOutUserAction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refresh gravatar
         * @param {UsersApiRefreshGravatarPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshGravatarPost(requestParameters: UsersApiRefreshGravatarPostRequest, options?: AxiosRequestConfig): AxiosPromise<UsersRefreshGravatarPostResponse> {
            return localVarFp.refreshGravatarPost(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send password reset email
         * @param {UsersApiSendPasswordResetEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPasswordResetEmail(requestParameters: UsersApiSendPasswordResetEmailRequest, options?: AxiosRequestConfig): AxiosPromise<UsersSendPasswordResetEmailResponse> {
            return localVarFp.sendPasswordResetEmail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Silence a user
         * @param {UsersApiSilenceByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        silenceById(requestParameters: UsersApiSilenceByIdRequest, options?: AxiosRequestConfig): AxiosPromise<UsersSilenceByIdResponse> {
            return localVarFp.silenceById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Suspend a user
         * @param {UsersApiSuspendByIdJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suspendByIdJson(requestParameters: UsersApiSuspendByIdJsonRequest, options?: AxiosRequestConfig): AxiosPromise<UsersSuspendByIdJsonResponse> {
            return localVarFp.suspendByIdJson(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update avatar
         * @param {UsersApiUpdateAvatarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAvatar(requestParameters: UsersApiUpdateAvatarRequest, options?: AxiosRequestConfig): AxiosPromise<UsersUpdateAvatarResponse> {
            return localVarFp.updateAvatar(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update email
         * @param {UsersApiUpdateEmailPreferencesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailPreferences(requestParameters: UsersApiUpdateEmailPreferencesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateEmailPreferences(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update username
         * @param {UsersApiUpdatePreferencesJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePreferencesJson(requestParameters: UsersApiUpdatePreferencesJsonRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePreferencesJson(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a user
         * @param {UsersApiUpdateUserDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserDetails(requestParameters: UsersApiUpdateUserDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<UsersUpdateUserDetailsResponse> {
            return localVarFp.updateUserDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for activateUser operation in UsersApi.
 * @export
 * @interface UsersApiActivateUserRequest
 */
export type UsersApiActivateUserRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof UsersApiActivateUser
    */
    readonly id: number
    
}

/**
 * Request parameters for anonymizeByIdJson operation in UsersApi.
 * @export
 * @interface UsersApiAnonymizeByIdJsonRequest
 */
export type UsersApiAnonymizeByIdJsonRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof UsersApiAnonymizeByIdJson
    */
    readonly id: number
    
}

/**
 * Request parameters for changePasswordAction operation in UsersApi.
 * @export
 * @interface UsersApiChangePasswordActionRequest
 */
export type UsersApiChangePasswordActionRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiChangePasswordAction
    */
    readonly token: string
    
} & UsersChangePasswordActionRequest

/**
 * Request parameters for createUser operation in UsersApi.
 * @export
 * @interface UsersApiCreateUserRequest
 */
export type UsersApiCreateUserRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiCreateUser
    */
    readonly apiKey: string
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiCreateUser
    */
    readonly apiUsername: string
    
} & UsersCreateUserRequest

/**
 * Request parameters for deactivateUser operation in UsersApi.
 * @export
 * @interface UsersApiDeactivateUserRequest
 */
export type UsersApiDeactivateUserRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof UsersApiDeactivateUser
    */
    readonly id: number
    
}

/**
 * Request parameters for deleteUserByIdJson operation in UsersApi.
 * @export
 * @interface UsersApiDeleteUserByIdJsonRequest
 */
export type UsersApiDeleteUserByIdJsonRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof UsersApiDeleteUserByIdJson
    */
    readonly id: number
    
} & UsersDeleteUserByIdJsonRequest

/**
 * Request parameters for getEmails operation in UsersApi.
 * @export
 * @interface UsersApiGetEmailsRequest
 */
export type UsersApiGetEmailsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetEmails
    */
    readonly username: string
    
}

/**
 * Request parameters for getIdentityProviderExternalId operation in UsersApi.
 * @export
 * @interface UsersApiGetIdentityProviderExternalIdRequest
 */
export type UsersApiGetIdentityProviderExternalIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetIdentityProviderExternalId
    */
    readonly apiKey: string
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetIdentityProviderExternalId
    */
    readonly apiUsername: string
    
    /**
    * Authentication provider name. Can be found in the provider callback URL: `/auth/{provider}/callback`
    * @type {string}
    * @memberof UsersApiGetIdentityProviderExternalId
    */
    readonly provider: string
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetIdentityProviderExternalId
    */
    readonly externalId: string
    
}

/**
 * Request parameters for getListOfUsers operation in UsersApi.
 * @export
 * @interface UsersApiGetListOfUsersRequest
 */
export type UsersApiGetListOfUsersRequest = {
    
    /**
    * 
    * @type {'active' | 'new' | 'staff' | 'suspended' | 'blocked' | 'suspect'}
    * @memberof UsersApiGetListOfUsers
    */
    readonly flag: 'active' | 'new' | 'staff' | 'suspended' | 'blocked' | 'suspect'
    
    /**
    * 
    * @type {'created' | 'last_emailed' | 'seen' | 'username' | 'email' | 'trust_level' | 'days_visited' | 'posts_read' | 'topics_viewed' | 'posts' | 'read_time'}
    * @memberof UsersApiGetListOfUsers
    */
    readonly order?: 'created' | 'last_emailed' | 'seen' | 'username' | 'email' | 'trust_level' | 'days_visited' | 'posts_read' | 'topics_viewed' | 'posts' | 'read_time'
    
    /**
    * 
    * @type {'true'}
    * @memberof UsersApiGetListOfUsers
    */
    readonly asc?: 'true'
    
    /**
    * 
    * @type {number}
    * @memberof UsersApiGetListOfUsers
    */
    readonly page?: number
    
    /**
    * Include user email addresses in response. These requests will be logged in the staff action logs.
    * @type {boolean}
    * @memberof UsersApiGetListOfUsers
    */
    readonly showEmails?: boolean
    
    /**
    * Include user stats information
    * @type {boolean}
    * @memberof UsersApiGetListOfUsers
    */
    readonly stats?: boolean
    
    /**
    * Filter to the user with this email address
    * @type {string}
    * @memberof UsersApiGetListOfUsers
    */
    readonly email?: string
    
    /**
    * Filter to users with this IP address
    * @type {string}
    * @memberof UsersApiGetListOfUsers
    */
    readonly ip?: string
    
}

/**
 * Request parameters for getUserByExternalId operation in UsersApi.
 * @export
 * @interface UsersApiGetUserByExternalIdRequest
 */
export type UsersApiGetUserByExternalIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetUserByExternalId
    */
    readonly apiKey: string
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetUserByExternalId
    */
    readonly apiUsername: string
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetUserByExternalId
    */
    readonly externalId: string
    
}

/**
 * Request parameters for getUserByIdJson operation in UsersApi.
 * @export
 * @interface UsersApiGetUserByIdJsonRequest
 */
export type UsersApiGetUserByIdJsonRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof UsersApiGetUserByIdJson
    */
    readonly id: number
    
}

/**
 * Request parameters for getUserByUsername operation in UsersApi.
 * @export
 * @interface UsersApiGetUserByUsernameRequest
 */
export type UsersApiGetUserByUsernameRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetUserByUsername
    */
    readonly apiKey: string
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetUserByUsername
    */
    readonly apiUsername: string
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiGetUserByUsername
    */
    readonly username: string
    
}

/**
 * Request parameters for listPublicUser operation in UsersApi.
 * @export
 * @interface UsersApiListPublicUserRequest
 */
export type UsersApiListPublicUserRequest = {
    
    /**
    * 
    * @type {'daily' | 'weekly' | 'monthly' | 'quarterly' | 'yearly' | 'all'}
    * @memberof UsersApiListPublicUser
    */
    readonly period: 'daily' | 'weekly' | 'monthly' | 'quarterly' | 'yearly' | 'all'
    
    /**
    * 
    * @type {'likes_received' | 'likes_given' | 'topic_count' | 'post_count' | 'topics_entered' | 'posts_read' | 'days_visited'}
    * @memberof UsersApiListPublicUser
    */
    readonly order: 'likes_received' | 'likes_given' | 'topic_count' | 'post_count' | 'topics_entered' | 'posts_read' | 'days_visited'
    
    /**
    * 
    * @type {'true'}
    * @memberof UsersApiListPublicUser
    */
    readonly asc?: 'true'
    
    /**
    * 
    * @type {number}
    * @memberof UsersApiListPublicUser
    */
    readonly page?: number
    
}

/**
 * Request parameters for listUserActions operation in UsersApi.
 * @export
 * @interface UsersApiListUserActionsRequest
 */
export type UsersApiListUserActionsRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof UsersApiListUserActions
    */
    readonly offset: number
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiListUserActions
    */
    readonly username: string
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiListUserActions
    */
    readonly filter: string
    
}

/**
 * Request parameters for listUserBadges operation in UsersApi.
 * @export
 * @interface UsersApiListUserBadgesRequest
 */
export type UsersApiListUserBadgesRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiListUserBadges
    */
    readonly username: string
    
}

/**
 * Request parameters for logOutUserAction operation in UsersApi.
 * @export
 * @interface UsersApiLogOutUserActionRequest
 */
export type UsersApiLogOutUserActionRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof UsersApiLogOutUserAction
    */
    readonly id: number
    
}

/**
 * Request parameters for refreshGravatarPost operation in UsersApi.
 * @export
 * @interface UsersApiRefreshGravatarPostRequest
 */
export type UsersApiRefreshGravatarPostRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiRefreshGravatarPost
    */
    readonly username: string
    
}

/**
 * Request parameters for sendPasswordResetEmail operation in UsersApi.
 * @export
 * @interface UsersApiSendPasswordResetEmailRequest
 */
export type UsersApiSendPasswordResetEmailRequest = {
    
} & UsersSendPasswordResetEmailRequest

/**
 * Request parameters for silenceById operation in UsersApi.
 * @export
 * @interface UsersApiSilenceByIdRequest
 */
export type UsersApiSilenceByIdRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof UsersApiSilenceById
    */
    readonly id: number
    
} & UsersSilenceByIdRequest

/**
 * Request parameters for suspendByIdJson operation in UsersApi.
 * @export
 * @interface UsersApiSuspendByIdJsonRequest
 */
export type UsersApiSuspendByIdJsonRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof UsersApiSuspendByIdJson
    */
    readonly id: number
    
} & UsersSuspendByIdJsonRequest

/**
 * Request parameters for updateAvatar operation in UsersApi.
 * @export
 * @interface UsersApiUpdateAvatarRequest
 */
export type UsersApiUpdateAvatarRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiUpdateAvatar
    */
    readonly username: string
    
} & UsersUpdateAvatarRequest

/**
 * Request parameters for updateEmailPreferences operation in UsersApi.
 * @export
 * @interface UsersApiUpdateEmailPreferencesRequest
 */
export type UsersApiUpdateEmailPreferencesRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiUpdateEmailPreferences
    */
    readonly username: string
    
} & UsersUpdateEmailPreferencesRequest

/**
 * Request parameters for updatePreferencesJson operation in UsersApi.
 * @export
 * @interface UsersApiUpdatePreferencesJsonRequest
 */
export type UsersApiUpdatePreferencesJsonRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiUpdatePreferencesJson
    */
    readonly username: string
    
} & UsersUpdatePreferencesJsonRequest

/**
 * Request parameters for updateUserDetails operation in UsersApi.
 * @export
 * @interface UsersApiUpdateUserDetailsRequest
 */
export type UsersApiUpdateUserDetailsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiUpdateUserDetails
    */
    readonly apiKey: string
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiUpdateUserDetails
    */
    readonly apiUsername: string
    
    /**
    * 
    * @type {string}
    * @memberof UsersApiUpdateUserDetails
    */
    readonly username: string
    
} & UsersUpdateUserDetailsRequest

/**
 * UsersApiGenerated - object-oriented interface
 * @export
 * @class UsersApiGenerated
 * @extends {BaseAPI}
 */
export class UsersApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Activate a user
     * @param {UsersApiActivateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public activateUser(requestParameters: UsersApiActivateUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).activateUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Anonymize a user
     * @param {UsersApiAnonymizeByIdJsonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public anonymizeByIdJson(requestParameters: UsersApiAnonymizeByIdJsonRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).anonymizeByIdJson(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change password
     * @param {UsersApiChangePasswordActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public changePasswordAction(requestParameters: UsersApiChangePasswordActionRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).changePasswordAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a user
     * @param {UsersApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public createUser(requestParameters: UsersApiCreateUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).createUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deactivate a user
     * @param {UsersApiDeactivateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public deactivateUser(requestParameters: UsersApiDeactivateUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).deactivateUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a user
     * @param {UsersApiDeleteUserByIdJsonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public deleteUserByIdJson(requestParameters: UsersApiDeleteUserByIdJsonRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).deleteUserByIdJson(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get email addresses belonging to a user
     * @param {UsersApiGetEmailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getEmails(requestParameters: UsersApiGetEmailsRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getEmails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a user by identity provider external ID
     * @param {UsersApiGetIdentityProviderExternalIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getIdentityProviderExternalId(requestParameters: UsersApiGetIdentityProviderExternalIdRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getIdentityProviderExternalId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of users
     * @param {UsersApiGetListOfUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getListOfUsers(requestParameters: UsersApiGetListOfUsersRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getListOfUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a user by external_id
     * @param {UsersApiGetUserByExternalIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getUserByExternalId(requestParameters: UsersApiGetUserByExternalIdRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserByExternalId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a user by id
     * @param {UsersApiGetUserByIdJsonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getUserByIdJson(requestParameters: UsersApiGetUserByIdJsonRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserByIdJson(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a single user by username
     * @param {UsersApiGetUserByUsernameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getUserByUsername(requestParameters: UsersApiGetUserByUsernameRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserByUsername(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a public list of users
     * @param {UsersApiListPublicUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public listPublicUser(requestParameters: UsersApiListPublicUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listPublicUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of user actions
     * @param {UsersApiListUserActionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public listUserActions(requestParameters: UsersApiListUserActionsRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUserActions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List badges for a user
     * @param {UsersApiListUserBadgesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public listUserBadges(requestParameters: UsersApiListUserBadgesRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUserBadges(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Log a user out
     * @param {UsersApiLogOutUserActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public logOutUserAction(requestParameters: UsersApiLogOutUserActionRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).logOutUserAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refresh gravatar
     * @param {UsersApiRefreshGravatarPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public refreshGravatarPost(requestParameters: UsersApiRefreshGravatarPostRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).refreshGravatarPost(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send password reset email
     * @param {UsersApiSendPasswordResetEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public sendPasswordResetEmail(requestParameters: UsersApiSendPasswordResetEmailRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).sendPasswordResetEmail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Silence a user
     * @param {UsersApiSilenceByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public silenceById(requestParameters: UsersApiSilenceByIdRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).silenceById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Suspend a user
     * @param {UsersApiSuspendByIdJsonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public suspendByIdJson(requestParameters: UsersApiSuspendByIdJsonRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).suspendByIdJson(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update avatar
     * @param {UsersApiUpdateAvatarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public updateAvatar(requestParameters: UsersApiUpdateAvatarRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateAvatar(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update email
     * @param {UsersApiUpdateEmailPreferencesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public updateEmailPreferences(requestParameters: UsersApiUpdateEmailPreferencesRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateEmailPreferences(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update username
     * @param {UsersApiUpdatePreferencesJsonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public updatePreferencesJson(requestParameters: UsersApiUpdatePreferencesJsonRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updatePreferencesJson(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a user
     * @param {UsersApiUpdateUserDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public updateUserDetails(requestParameters: UsersApiUpdateUserDetailsRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUserDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
