/* tslint:disable */
/* eslint-disable */
/*
Discourse API Documentation

This page contains the documentation on how to use Discourse through API calls.

> Note: For any endpoints not listed you can follow the
[reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576)
guide to figure out how to use an API endpoint.

### Request Content-Type

The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`,
`multipart/form-data`, or `application/json`.

### Endpoint Names and Response Content-Type

Most API endpoints provide the same content as their HTML counterparts. For example
the URL `/categories` serves a list of categories, the `/categories.json` API provides the
same information in JSON format.

Instead of sending API requests to `/categories.json` you may also send them to `/categories`
and add an `Accept: application/json` header to the request to get the JSON response.
Sending requests with the `Accept` header is necessary if you want to use URLs
for related endpoints returned by the API, such as pagination URLs.
These URLs are returned without the `.json` prefix so you need to add the header in
order to get the correct response format.

### Authentication

Some endpoints do not require any authentication, pretty much anything else will
require you to be authenticated.

To become authenticated you will need to create an API Key from the admin panel.

Once you have your API Key you can pass it in along with your API Username
as an HTTP header like this:

```
curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\
-H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\
-H \"Api-Username: system\"
```

and this is how POST requests will look:

```
curl -X POST \"http://127.0.0.1:3000/categories\" \\
-H \"Content-Type: multipart/form-data;\" \\
-H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\
-H \"Api-Username: system\" \\
-F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\
-F \"color=49d9e9\" \\
-F \"text_color=f0fcfd\"
```

### Boolean values

If an endpoint accepts a boolean be sure to specify it as a lowercase
`true` or `false` value unless noted otherwise.


The version of the OpenAPI document: latest


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PostsCreateTopicPostMessageRequest } from '../models';
// @ts-ignore
import { PostsCreateTopicPostMessageResponse } from '../models';
// @ts-ignore
import { PostsDeleteSinglePostRequest } from '../models';
// @ts-ignore
import { PostsGetSinglePostLikesResponse } from '../models';
// @ts-ignore
import { PostsLikePostActionRequest } from '../models';
// @ts-ignore
import { PostsLikePostActionResponse } from '../models';
// @ts-ignore
import { PostsListLatestPostsAcrossTopicsResponse } from '../models';
// @ts-ignore
import { PostsListRepliesToPostResponseInner } from '../models';
// @ts-ignore
import { PostsLockPostActionRequest } from '../models';
// @ts-ignore
import { PostsLockPostActionResponse } from '../models';
// @ts-ignore
import { PostsUpdateSinglePostJsonRequest } from '../models';
// @ts-ignore
import { PostsUpdateSinglePostJsonRequestPost } from '../models';
// @ts-ignore
import { PostsUpdateSinglePostJsonResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PostsApi - axios parameter creator
 * @export
 */
export const PostsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new topic, a new post, or a private message
         * @param {PostsCreateTopicPostMessageRequest} [postsCreateTopicPostMessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTopicPostMessage: async (postsCreateTopicPostMessageRequest?: PostsCreateTopicPostMessageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/posts.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: postsCreateTopicPostMessageRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/posts.json',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(postsCreateTopicPostMessageRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete a single post
         * @param {number} id 
         * @param {PostsDeleteSinglePostRequest} [postsDeleteSinglePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSinglePost: async (id: number, postsDeleteSinglePostRequest?: PostsDeleteSinglePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSinglePost', 'id', id)
            const localVarPath = `/posts/{id}.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: postsDeleteSinglePostRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/posts/{id}.json',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(postsDeleteSinglePostRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint can be used to get the number of likes on a post using the `actions_summary` property in the response. `actions_summary` responses with the id of `2` signify a `like`. If there are no `actions_summary` items with the id of `2`, that means there are 0 likes. Other ids likely refer to various different flag types. 
         * @summary Retrieve a single post
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSinglePostLikes: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSinglePostLikes', 'id', id)
            const localVarPath = `/posts/{id}.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/posts/{id}.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Like a post and other actions
         * @param {string} apiKey 
         * @param {string} apiUsername 
         * @param {PostsLikePostActionRequest} [postsLikePostActionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        likePostAction: async (apiKey: string, apiUsername: string, postsLikePostActionRequest?: PostsLikePostActionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('likePostAction', 'apiKey', apiKey)
            // verify required parameter 'apiUsername' is not null or undefined
            assertParamExists('likePostAction', 'apiUsername', apiUsername)
            const localVarPath = `/post_actions.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['Api-Key'] = String(apiKey);
            }

            if (apiUsername != null) {
                localVarHeaderParameter['Api-Username'] = String(apiUsername);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: postsLikePostActionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/post_actions.json',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(postsLikePostActionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List latest posts across topics
         * @param {string} apiKey 
         * @param {string} apiUsername 
         * @param {string} [before] Load posts with an id lower than this value. Useful for pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLatestPostsAcrossTopics: async (apiKey: string, apiUsername: string, before?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('listLatestPostsAcrossTopics', 'apiKey', apiKey)
            // verify required parameter 'apiUsername' is not null or undefined
            assertParamExists('listLatestPostsAcrossTopics', 'apiUsername', apiUsername)
            const localVarPath = `/posts.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }

            if (apiKey != null) {
                localVarHeaderParameter['Api-Key'] = String(apiKey);
            }

            if (apiUsername != null) {
                localVarHeaderParameter['Api-Username'] = String(apiUsername);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/posts.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List replies to a post
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRepliesToPost: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listRepliesToPost', 'id', id)
            const localVarPath = `/posts/{id}/replies.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/posts/{id}/replies.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lock a post from being edited
         * @param {string} apiKey 
         * @param {string} apiUsername 
         * @param {string} id 
         * @param {PostsLockPostActionRequest} [postsLockPostActionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lockPostAction: async (apiKey: string, apiUsername: string, id: string, postsLockPostActionRequest?: PostsLockPostActionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('lockPostAction', 'apiKey', apiKey)
            // verify required parameter 'apiUsername' is not null or undefined
            assertParamExists('lockPostAction', 'apiUsername', apiUsername)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('lockPostAction', 'id', id)
            const localVarPath = `/posts/{id}/locked.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['Api-Key'] = String(apiKey);
            }

            if (apiUsername != null) {
                localVarHeaderParameter['Api-Username'] = String(apiUsername);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: postsLockPostActionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/posts/{id}/locked.json',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(postsLockPostActionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a single post
         * @param {string} id 
         * @param {PostsUpdateSinglePostJsonRequest} [postsUpdateSinglePostJsonRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSinglePostJson: async (id: string, postsUpdateSinglePostJsonRequest?: PostsUpdateSinglePostJsonRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSinglePostJson', 'id', id)
            const localVarPath = `/posts/{id}.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: postsUpdateSinglePostJsonRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/posts/{id}.json',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(postsUpdateSinglePostJsonRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostsApi - functional programming interface
 * @export
 */
export const PostsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PostsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a new topic, a new post, or a private message
         * @param {PostsApiCreateTopicPostMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTopicPostMessage(requestParameters: PostsApiCreateTopicPostMessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostsCreateTopicPostMessageResponse>> {
            const postsCreateTopicPostMessageRequest: PostsCreateTopicPostMessageRequest = {
                title: requestParameters.title,
                raw: requestParameters.raw,
                topic_id: requestParameters.topic_id,
                category: requestParameters.category,
                target_recipients: requestParameters.target_recipients,
                target_usernames: requestParameters.target_usernames,
                archetype: requestParameters.archetype,
                created_at: requestParameters.created_at,
                reply_to_post_number: requestParameters.reply_to_post_number,
                embed_url: requestParameters.embed_url,
                external_id: requestParameters.external_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTopicPostMessage(postsCreateTopicPostMessageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete a single post
         * @param {PostsApiDeleteSinglePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSinglePost(requestParameters: PostsApiDeleteSinglePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const postsDeleteSinglePostRequest: PostsDeleteSinglePostRequest = {
                force_destroy: requestParameters.force_destroy
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSinglePost(requestParameters.id, postsDeleteSinglePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint can be used to get the number of likes on a post using the `actions_summary` property in the response. `actions_summary` responses with the id of `2` signify a `like`. If there are no `actions_summary` items with the id of `2`, that means there are 0 likes. Other ids likely refer to various different flag types. 
         * @summary Retrieve a single post
         * @param {PostsApiGetSinglePostLikesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSinglePostLikes(requestParameters: PostsApiGetSinglePostLikesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostsGetSinglePostLikesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSinglePostLikes(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Like a post and other actions
         * @param {PostsApiLikePostActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async likePostAction(requestParameters: PostsApiLikePostActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostsLikePostActionResponse>> {
            const postsLikePostActionRequest: PostsLikePostActionRequest = {
                id: requestParameters.id,
                post_action_type_id: requestParameters.post_action_type_id,
                flag_topic: requestParameters.flag_topic
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.likePostAction(requestParameters.apiKey, requestParameters.apiUsername, postsLikePostActionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List latest posts across topics
         * @param {PostsApiListLatestPostsAcrossTopicsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLatestPostsAcrossTopics(requestParameters: PostsApiListLatestPostsAcrossTopicsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostsListLatestPostsAcrossTopicsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLatestPostsAcrossTopics(requestParameters.apiKey, requestParameters.apiUsername, requestParameters.before, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List replies to a post
         * @param {PostsApiListRepliesToPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRepliesToPost(requestParameters: PostsApiListRepliesToPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<PostsListRepliesToPostResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRepliesToPost(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lock a post from being edited
         * @param {PostsApiLockPostActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lockPostAction(requestParameters: PostsApiLockPostActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostsLockPostActionResponse>> {
            const postsLockPostActionRequest: PostsLockPostActionRequest = {
                locked: requestParameters.locked
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.lockPostAction(requestParameters.apiKey, requestParameters.apiUsername, requestParameters.id, postsLockPostActionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a single post
         * @param {PostsApiUpdateSinglePostJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSinglePostJson(requestParameters: PostsApiUpdateSinglePostJsonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostsUpdateSinglePostJsonResponse>> {
            const postsUpdateSinglePostJsonRequest: PostsUpdateSinglePostJsonRequest = {
                post: requestParameters.post
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSinglePostJson(requestParameters.id, postsUpdateSinglePostJsonRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PostsApi - factory interface
 * @export
 */
export const PostsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PostsApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a new topic, a new post, or a private message
         * @param {PostsApiCreateTopicPostMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTopicPostMessage(requestParameters: PostsApiCreateTopicPostMessageRequest, options?: AxiosRequestConfig): AxiosPromise<PostsCreateTopicPostMessageResponse> {
            return localVarFp.createTopicPostMessage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete a single post
         * @param {PostsApiDeleteSinglePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSinglePost(requestParameters: PostsApiDeleteSinglePostRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSinglePost(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint can be used to get the number of likes on a post using the `actions_summary` property in the response. `actions_summary` responses with the id of `2` signify a `like`. If there are no `actions_summary` items with the id of `2`, that means there are 0 likes. Other ids likely refer to various different flag types. 
         * @summary Retrieve a single post
         * @param {PostsApiGetSinglePostLikesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSinglePostLikes(requestParameters: PostsApiGetSinglePostLikesRequest, options?: AxiosRequestConfig): AxiosPromise<PostsGetSinglePostLikesResponse> {
            return localVarFp.getSinglePostLikes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Like a post and other actions
         * @param {PostsApiLikePostActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        likePostAction(requestParameters: PostsApiLikePostActionRequest, options?: AxiosRequestConfig): AxiosPromise<PostsLikePostActionResponse> {
            return localVarFp.likePostAction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List latest posts across topics
         * @param {PostsApiListLatestPostsAcrossTopicsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLatestPostsAcrossTopics(requestParameters: PostsApiListLatestPostsAcrossTopicsRequest, options?: AxiosRequestConfig): AxiosPromise<PostsListLatestPostsAcrossTopicsResponse> {
            return localVarFp.listLatestPostsAcrossTopics(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List replies to a post
         * @param {PostsApiListRepliesToPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRepliesToPost(requestParameters: PostsApiListRepliesToPostRequest, options?: AxiosRequestConfig): AxiosPromise<Set<PostsListRepliesToPostResponseInner>> {
            return localVarFp.listRepliesToPost(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lock a post from being edited
         * @param {PostsApiLockPostActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lockPostAction(requestParameters: PostsApiLockPostActionRequest, options?: AxiosRequestConfig): AxiosPromise<PostsLockPostActionResponse> {
            return localVarFp.lockPostAction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a single post
         * @param {PostsApiUpdateSinglePostJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSinglePostJson(requestParameters: PostsApiUpdateSinglePostJsonRequest, options?: AxiosRequestConfig): AxiosPromise<PostsUpdateSinglePostJsonResponse> {
            return localVarFp.updateSinglePostJson(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createTopicPostMessage operation in PostsApi.
 * @export
 * @interface PostsApiCreateTopicPostMessageRequest
 */
export type PostsApiCreateTopicPostMessageRequest = {
    
} & PostsCreateTopicPostMessageRequest

/**
 * Request parameters for deleteSinglePost operation in PostsApi.
 * @export
 * @interface PostsApiDeleteSinglePostRequest
 */
export type PostsApiDeleteSinglePostRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof PostsApiDeleteSinglePost
    */
    readonly id: number
    
} & PostsDeleteSinglePostRequest

/**
 * Request parameters for getSinglePostLikes operation in PostsApi.
 * @export
 * @interface PostsApiGetSinglePostLikesRequest
 */
export type PostsApiGetSinglePostLikesRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PostsApiGetSinglePostLikes
    */
    readonly id: string
    
}

/**
 * Request parameters for likePostAction operation in PostsApi.
 * @export
 * @interface PostsApiLikePostActionRequest
 */
export type PostsApiLikePostActionRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PostsApiLikePostAction
    */
    readonly apiKey: string
    
    /**
    * 
    * @type {string}
    * @memberof PostsApiLikePostAction
    */
    readonly apiUsername: string
    
} & PostsLikePostActionRequest

/**
 * Request parameters for listLatestPostsAcrossTopics operation in PostsApi.
 * @export
 * @interface PostsApiListLatestPostsAcrossTopicsRequest
 */
export type PostsApiListLatestPostsAcrossTopicsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PostsApiListLatestPostsAcrossTopics
    */
    readonly apiKey: string
    
    /**
    * 
    * @type {string}
    * @memberof PostsApiListLatestPostsAcrossTopics
    */
    readonly apiUsername: string
    
    /**
    * Load posts with an id lower than this value. Useful for pagination.
    * @type {string}
    * @memberof PostsApiListLatestPostsAcrossTopics
    */
    readonly before?: string
    
}

/**
 * Request parameters for listRepliesToPost operation in PostsApi.
 * @export
 * @interface PostsApiListRepliesToPostRequest
 */
export type PostsApiListRepliesToPostRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PostsApiListRepliesToPost
    */
    readonly id: string
    
}

/**
 * Request parameters for lockPostAction operation in PostsApi.
 * @export
 * @interface PostsApiLockPostActionRequest
 */
export type PostsApiLockPostActionRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PostsApiLockPostAction
    */
    readonly apiKey: string
    
    /**
    * 
    * @type {string}
    * @memberof PostsApiLockPostAction
    */
    readonly apiUsername: string
    
    /**
    * 
    * @type {string}
    * @memberof PostsApiLockPostAction
    */
    readonly id: string
    
} & PostsLockPostActionRequest

/**
 * Request parameters for updateSinglePostJson operation in PostsApi.
 * @export
 * @interface PostsApiUpdateSinglePostJsonRequest
 */
export type PostsApiUpdateSinglePostJsonRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PostsApiUpdateSinglePostJson
    */
    readonly id: string
    
} & PostsUpdateSinglePostJsonRequest

/**
 * PostsApiGenerated - object-oriented interface
 * @export
 * @class PostsApiGenerated
 * @extends {BaseAPI}
 */
export class PostsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Creates a new topic, a new post, or a private message
     * @param {PostsApiCreateTopicPostMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApiGenerated
     */
    public createTopicPostMessage(requestParameters: PostsApiCreateTopicPostMessageRequest, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).createTopicPostMessage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete a single post
     * @param {PostsApiDeleteSinglePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApiGenerated
     */
    public deleteSinglePost(requestParameters: PostsApiDeleteSinglePostRequest, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).deleteSinglePost(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint can be used to get the number of likes on a post using the `actions_summary` property in the response. `actions_summary` responses with the id of `2` signify a `like`. If there are no `actions_summary` items with the id of `2`, that means there are 0 likes. Other ids likely refer to various different flag types. 
     * @summary Retrieve a single post
     * @param {PostsApiGetSinglePostLikesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApiGenerated
     */
    public getSinglePostLikes(requestParameters: PostsApiGetSinglePostLikesRequest, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).getSinglePostLikes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Like a post and other actions
     * @param {PostsApiLikePostActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApiGenerated
     */
    public likePostAction(requestParameters: PostsApiLikePostActionRequest, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).likePostAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List latest posts across topics
     * @param {PostsApiListLatestPostsAcrossTopicsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApiGenerated
     */
    public listLatestPostsAcrossTopics(requestParameters: PostsApiListLatestPostsAcrossTopicsRequest, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).listLatestPostsAcrossTopics(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List replies to a post
     * @param {PostsApiListRepliesToPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApiGenerated
     */
    public listRepliesToPost(requestParameters: PostsApiListRepliesToPostRequest, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).listRepliesToPost(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lock a post from being edited
     * @param {PostsApiLockPostActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApiGenerated
     */
    public lockPostAction(requestParameters: PostsApiLockPostActionRequest, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).lockPostAction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a single post
     * @param {PostsApiUpdateSinglePostJsonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApiGenerated
     */
    public updateSinglePostJson(requestParameters: PostsApiUpdateSinglePostJsonRequest, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).updateSinglePostJson(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
