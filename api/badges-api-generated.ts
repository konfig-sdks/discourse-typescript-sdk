/* tslint:disable */
/* eslint-disable */
/*
Discourse API Documentation

This page contains the documentation on how to use Discourse through API calls.

> Note: For any endpoints not listed you can follow the
[reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576)
guide to figure out how to use an API endpoint.

### Request Content-Type

The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`,
`multipart/form-data`, or `application/json`.

### Endpoint Names and Response Content-Type

Most API endpoints provide the same content as their HTML counterparts. For example
the URL `/categories` serves a list of categories, the `/categories.json` API provides the
same information in JSON format.

Instead of sending API requests to `/categories.json` you may also send them to `/categories`
and add an `Accept: application/json` header to the request to get the JSON response.
Sending requests with the `Accept` header is necessary if you want to use URLs
for related endpoints returned by the API, such as pagination URLs.
These URLs are returned without the `.json` prefix so you need to add the header in
order to get the correct response format.

### Authentication

Some endpoints do not require any authentication, pretty much anything else will
require you to be authenticated.

To become authenticated you will need to create an API Key from the admin panel.

Once you have your API Key you can pass it in along with your API Username
as an HTTP header like this:

```
curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\
-H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\
-H \"Api-Username: system\"
```

and this is how POST requests will look:

```
curl -X POST \"http://127.0.0.1:3000/categories\" \\
-H \"Content-Type: multipart/form-data;\" \\
-H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\
-H \"Api-Username: system\" \\
-F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\
-F \"color=49d9e9\" \\
-F \"text_color=f0fcfd\"
```

### Boolean values

If an endpoint accepts a boolean be sure to specify it as a lowercase
`true` or `false` value unless noted otherwise.


The version of the OpenAPI document: latest


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadgesCreateBadgeRequest } from '../models';
// @ts-ignore
import { BadgesCreateBadgeResponse } from '../models';
// @ts-ignore
import { BadgesListResponse } from '../models';
// @ts-ignore
import { BadgesListUserBadgesResponse } from '../models';
// @ts-ignore
import { BadgesUpdateBadgeByIdJsonRequest } from '../models';
// @ts-ignore
import { BadgesUpdateBadgeByIdJsonResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BadgesApi - axios parameter creator
 * @export
 */
export const BadgesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create badge
         * @param {BadgesCreateBadgeRequest} [badgesCreateBadgeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBadge: async (badgesCreateBadgeRequest?: BadgesCreateBadgeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/badges.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: badgesCreateBadgeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/badges.json',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(badgesCreateBadgeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete badge
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByIdJson: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteByIdJson', 'id', id)
            const localVarPath = `/admin/badges/{id}.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/badges/{id}.json',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List badges
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/badges.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/badges.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List badges for a user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserBadges: async (username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('listUserBadges', 'username', username)
            const localVarPath = `/user-badges/{username}.json`
                .replace(`{${"username"}}`, encodeURIComponent(String(username !== undefined ? username : `-username-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/user-badges/{username}.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update badge
         * @param {number} id 
         * @param {BadgesUpdateBadgeByIdJsonRequest} [badgesUpdateBadgeByIdJsonRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBadgeByIdJson: async (id: number, badgesUpdateBadgeByIdJsonRequest?: BadgesUpdateBadgeByIdJsonRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateBadgeByIdJson', 'id', id)
            const localVarPath = `/admin/badges/{id}.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: badgesUpdateBadgeByIdJsonRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/badges/{id}.json',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(badgesUpdateBadgeByIdJsonRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BadgesApi - functional programming interface
 * @export
 */
export const BadgesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BadgesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create badge
         * @param {BadgesApiCreateBadgeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBadge(requestParameters: BadgesApiCreateBadgeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BadgesCreateBadgeResponse>> {
            const badgesCreateBadgeRequest: BadgesCreateBadgeRequest = {
                name: requestParameters.name,
                badge_type_id: requestParameters.badge_type_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBadge(badgesCreateBadgeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete badge
         * @param {BadgesApiDeleteByIdJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteByIdJson(requestParameters: BadgesApiDeleteByIdJsonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteByIdJson(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List badges
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BadgesListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List badges for a user
         * @param {BadgesApiListUserBadgesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserBadges(requestParameters: BadgesApiListUserBadgesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BadgesListUserBadgesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserBadges(requestParameters.username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update badge
         * @param {BadgesApiUpdateBadgeByIdJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBadgeByIdJson(requestParameters: BadgesApiUpdateBadgeByIdJsonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BadgesUpdateBadgeByIdJsonResponse>> {
            const badgesUpdateBadgeByIdJsonRequest: BadgesUpdateBadgeByIdJsonRequest = {
                name: requestParameters.name,
                badge_type_id: requestParameters.badge_type_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBadgeByIdJson(requestParameters.id, badgesUpdateBadgeByIdJsonRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BadgesApi - factory interface
 * @export
 */
export const BadgesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BadgesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create badge
         * @param {BadgesApiCreateBadgeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBadge(requestParameters: BadgesApiCreateBadgeRequest, options?: AxiosRequestConfig): AxiosPromise<BadgesCreateBadgeResponse> {
            return localVarFp.createBadge(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete badge
         * @param {BadgesApiDeleteByIdJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByIdJson(requestParameters: BadgesApiDeleteByIdJsonRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteByIdJson(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List badges
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: AxiosRequestConfig): AxiosPromise<BadgesListResponse> {
            return localVarFp.list(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List badges for a user
         * @param {BadgesApiListUserBadgesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserBadges(requestParameters: BadgesApiListUserBadgesRequest, options?: AxiosRequestConfig): AxiosPromise<BadgesListUserBadgesResponse> {
            return localVarFp.listUserBadges(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update badge
         * @param {BadgesApiUpdateBadgeByIdJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBadgeByIdJson(requestParameters: BadgesApiUpdateBadgeByIdJsonRequest, options?: AxiosRequestConfig): AxiosPromise<BadgesUpdateBadgeByIdJsonResponse> {
            return localVarFp.updateBadgeByIdJson(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createBadge operation in BadgesApi.
 * @export
 * @interface BadgesApiCreateBadgeRequest
 */
export type BadgesApiCreateBadgeRequest = {
    
} & BadgesCreateBadgeRequest

/**
 * Request parameters for deleteByIdJson operation in BadgesApi.
 * @export
 * @interface BadgesApiDeleteByIdJsonRequest
 */
export type BadgesApiDeleteByIdJsonRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof BadgesApiDeleteByIdJson
    */
    readonly id: number
    
}

/**
 * Request parameters for listUserBadges operation in BadgesApi.
 * @export
 * @interface BadgesApiListUserBadgesRequest
 */
export type BadgesApiListUserBadgesRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof BadgesApiListUserBadges
    */
    readonly username: string
    
}

/**
 * Request parameters for updateBadgeByIdJson operation in BadgesApi.
 * @export
 * @interface BadgesApiUpdateBadgeByIdJsonRequest
 */
export type BadgesApiUpdateBadgeByIdJsonRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof BadgesApiUpdateBadgeByIdJson
    */
    readonly id: number
    
} & BadgesUpdateBadgeByIdJsonRequest

/**
 * BadgesApiGenerated - object-oriented interface
 * @export
 * @class BadgesApiGenerated
 * @extends {BaseAPI}
 */
export class BadgesApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create badge
     * @param {BadgesApiCreateBadgeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApiGenerated
     */
    public createBadge(requestParameters: BadgesApiCreateBadgeRequest, options?: AxiosRequestConfig) {
        return BadgesApiFp(this.configuration).createBadge(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete badge
     * @param {BadgesApiDeleteByIdJsonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApiGenerated
     */
    public deleteByIdJson(requestParameters: BadgesApiDeleteByIdJsonRequest, options?: AxiosRequestConfig) {
        return BadgesApiFp(this.configuration).deleteByIdJson(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List badges
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApiGenerated
     */
    public list(options?: AxiosRequestConfig) {
        return BadgesApiFp(this.configuration).list(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List badges for a user
     * @param {BadgesApiListUserBadgesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApiGenerated
     */
    public listUserBadges(requestParameters: BadgesApiListUserBadgesRequest, options?: AxiosRequestConfig) {
        return BadgesApiFp(this.configuration).listUserBadges(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update badge
     * @param {BadgesApiUpdateBadgeByIdJsonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApiGenerated
     */
    public updateBadgeByIdJson(requestParameters: BadgesApiUpdateBadgeByIdJsonRequest, options?: AxiosRequestConfig) {
        return BadgesApiFp(this.configuration).updateBadgeByIdJson(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
