/* tslint:disable */
/* eslint-disable */
/*
Discourse API Documentation

This page contains the documentation on how to use Discourse through API calls.

> Note: For any endpoints not listed you can follow the
[reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576)
guide to figure out how to use an API endpoint.

### Request Content-Type

The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`,
`multipart/form-data`, or `application/json`.

### Endpoint Names and Response Content-Type

Most API endpoints provide the same content as their HTML counterparts. For example
the URL `/categories` serves a list of categories, the `/categories.json` API provides the
same information in JSON format.

Instead of sending API requests to `/categories.json` you may also send them to `/categories`
and add an `Accept: application/json` header to the request to get the JSON response.
Sending requests with the `Accept` header is necessary if you want to use URLs
for related endpoints returned by the API, such as pagination URLs.
These URLs are returned without the `.json` prefix so you need to add the header in
order to get the correct response format.

### Authentication

Some endpoints do not require any authentication, pretty much anything else will
require you to be authenticated.

To become authenticated you will need to create an API Key from the admin panel.

Once you have your API Key you can pass it in along with your API Username
as an HTTP header like this:

```
curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\
-H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\
-H \"Api-Username: system\"
```

and this is how POST requests will look:

```
curl -X POST \"http://127.0.0.1:3000/categories\" \\
-H \"Content-Type: multipart/form-data;\" \\
-H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\
-H \"Api-Username: system\" \\
-F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\
-F \"color=49d9e9\" \\
-F \"text_color=f0fcfd\"
```

### Boolean values

If an endpoint accepts a boolean be sure to specify it as a lowercase
`true` or `false` value unless noted otherwise.


The version of the OpenAPI document: latest


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GroupsAddMembersToGroupRequest } from '../models';
// @ts-ignore
import { GroupsAddMembersToGroupResponse } from '../models';
// @ts-ignore
import { GroupsCreateNewGroupRequest } from '../models';
// @ts-ignore
import { GroupsCreateNewGroupRequestGroup } from '../models';
// @ts-ignore
import { GroupsCreateNewGroupResponse } from '../models';
// @ts-ignore
import { GroupsDeleteGroupByIdJsonResponse } from '../models';
// @ts-ignore
import { GroupsGetGroupByIdResponse } from '../models';
// @ts-ignore
import { GroupsListMembersJsonResponse } from '../models';
// @ts-ignore
import { GroupsListResponse } from '../models';
// @ts-ignore
import { GroupsRemoveMembersRequest } from '../models';
// @ts-ignore
import { GroupsRemoveMembersResponse } from '../models';
// @ts-ignore
import { GroupsUpdateGroupByIdJsonRequest } from '../models';
// @ts-ignore
import { GroupsUpdateGroupByIdJsonResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * GroupsApi - axios parameter creator
 * @export
 */
export const GroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add group members
         * @param {number} id 
         * @param {GroupsAddMembersToGroupRequest} [groupsAddMembersToGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMembersToGroup: async (id: number, groupsAddMembersToGroupRequest?: GroupsAddMembersToGroupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addMembersToGroup', 'id', id)
            const localVarPath = `/groups/{id}/members.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: groupsAddMembersToGroupRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{id}/members.json',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(groupsAddMembersToGroupRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a group
         * @param {GroupsCreateNewGroupRequest} [groupsCreateNewGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewGroup: async (groupsCreateNewGroupRequest?: GroupsCreateNewGroupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/groups.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: groupsCreateNewGroupRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/groups.json',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(groupsCreateNewGroupRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a group
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupByIdJson: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteGroupByIdJson', 'id', id)
            const localVarPath = `/admin/groups/{id}.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/admin/groups/{id}.json',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a group
         * @param {string} id Use group name instead of id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getGroupById', 'id', id)
            const localVarPath = `/groups/{id}.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{id}.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/groups.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List group members
         * @param {string} id Use group name instead of id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembersJson: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listMembersJson', 'id', id)
            const localVarPath = `/groups/{id}/members.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{id}/members.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove group members
         * @param {number} id 
         * @param {GroupsRemoveMembersRequest} [groupsRemoveMembersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMembers: async (id: number, groupsRemoveMembersRequest?: GroupsRemoveMembersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeMembers', 'id', id)
            const localVarPath = `/groups/{id}/members.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: groupsRemoveMembersRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{id}/members.json',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(groupsRemoveMembersRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a group
         * @param {number} id 
         * @param {GroupsUpdateGroupByIdJsonRequest} [groupsUpdateGroupByIdJsonRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroupByIdJson: async (id: number, groupsUpdateGroupByIdJsonRequest?: GroupsUpdateGroupByIdJsonRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateGroupByIdJson', 'id', id)
            const localVarPath = `/groups/{id}.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: groupsUpdateGroupByIdJsonRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/groups/{id}.json',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(groupsUpdateGroupByIdJsonRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupsApi - functional programming interface
 * @export
 */
export const GroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add group members
         * @param {GroupsApiAddMembersToGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMembersToGroup(requestParameters: GroupsApiAddMembersToGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupsAddMembersToGroupResponse>> {
            const groupsAddMembersToGroupRequest: GroupsAddMembersToGroupRequest = {
                usernames: requestParameters.usernames
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMembersToGroup(requestParameters.id, groupsAddMembersToGroupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a group
         * @param {GroupsApiCreateNewGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewGroup(requestParameters: GroupsApiCreateNewGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupsCreateNewGroupResponse>> {
            const groupsCreateNewGroupRequest: GroupsCreateNewGroupRequest = {
                group: requestParameters.group
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewGroup(groupsCreateNewGroupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a group
         * @param {GroupsApiDeleteGroupByIdJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroupByIdJson(requestParameters: GroupsApiDeleteGroupByIdJsonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupsDeleteGroupByIdJsonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroupByIdJson(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a group
         * @param {GroupsApiGetGroupByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupById(requestParameters: GroupsApiGetGroupByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupsGetGroupByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List group members
         * @param {GroupsApiListMembersJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMembersJson(requestParameters: GroupsApiListMembersJsonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupsListMembersJsonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMembersJson(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove group members
         * @param {GroupsApiRemoveMembersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeMembers(requestParameters: GroupsApiRemoveMembersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupsRemoveMembersResponse>> {
            const groupsRemoveMembersRequest: GroupsRemoveMembersRequest = {
                usernames: requestParameters.usernames
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeMembers(requestParameters.id, groupsRemoveMembersRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a group
         * @param {GroupsApiUpdateGroupByIdJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGroupByIdJson(requestParameters: GroupsApiUpdateGroupByIdJsonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupsUpdateGroupByIdJsonResponse>> {
            const groupsUpdateGroupByIdJsonRequest: GroupsUpdateGroupByIdJsonRequest = {
                group: requestParameters.group
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGroupByIdJson(requestParameters.id, groupsUpdateGroupByIdJsonRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GroupsApi - factory interface
 * @export
 */
export const GroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupsApiFp(configuration)
    return {
        /**
         * 
         * @summary Add group members
         * @param {GroupsApiAddMembersToGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMembersToGroup(requestParameters: GroupsApiAddMembersToGroupRequest, options?: AxiosRequestConfig): AxiosPromise<GroupsAddMembersToGroupResponse> {
            return localVarFp.addMembersToGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a group
         * @param {GroupsApiCreateNewGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewGroup(requestParameters: GroupsApiCreateNewGroupRequest, options?: AxiosRequestConfig): AxiosPromise<GroupsCreateNewGroupResponse> {
            return localVarFp.createNewGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a group
         * @param {GroupsApiDeleteGroupByIdJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupByIdJson(requestParameters: GroupsApiDeleteGroupByIdJsonRequest, options?: AxiosRequestConfig): AxiosPromise<GroupsDeleteGroupByIdJsonResponse> {
            return localVarFp.deleteGroupByIdJson(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a group
         * @param {GroupsApiGetGroupByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupById(requestParameters: GroupsApiGetGroupByIdRequest, options?: AxiosRequestConfig): AxiosPromise<GroupsGetGroupByIdResponse> {
            return localVarFp.getGroupById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: AxiosRequestConfig): AxiosPromise<GroupsListResponse> {
            return localVarFp.list(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List group members
         * @param {GroupsApiListMembersJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembersJson(requestParameters: GroupsApiListMembersJsonRequest, options?: AxiosRequestConfig): AxiosPromise<GroupsListMembersJsonResponse> {
            return localVarFp.listMembersJson(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove group members
         * @param {GroupsApiRemoveMembersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMembers(requestParameters: GroupsApiRemoveMembersRequest, options?: AxiosRequestConfig): AxiosPromise<GroupsRemoveMembersResponse> {
            return localVarFp.removeMembers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a group
         * @param {GroupsApiUpdateGroupByIdJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroupByIdJson(requestParameters: GroupsApiUpdateGroupByIdJsonRequest, options?: AxiosRequestConfig): AxiosPromise<GroupsUpdateGroupByIdJsonResponse> {
            return localVarFp.updateGroupByIdJson(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addMembersToGroup operation in GroupsApi.
 * @export
 * @interface GroupsApiAddMembersToGroupRequest
 */
export type GroupsApiAddMembersToGroupRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof GroupsApiAddMembersToGroup
    */
    readonly id: number
    
} & GroupsAddMembersToGroupRequest

/**
 * Request parameters for createNewGroup operation in GroupsApi.
 * @export
 * @interface GroupsApiCreateNewGroupRequest
 */
export type GroupsApiCreateNewGroupRequest = {
    
} & GroupsCreateNewGroupRequest

/**
 * Request parameters for deleteGroupByIdJson operation in GroupsApi.
 * @export
 * @interface GroupsApiDeleteGroupByIdJsonRequest
 */
export type GroupsApiDeleteGroupByIdJsonRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof GroupsApiDeleteGroupByIdJson
    */
    readonly id: number
    
}

/**
 * Request parameters for getGroupById operation in GroupsApi.
 * @export
 * @interface GroupsApiGetGroupByIdRequest
 */
export type GroupsApiGetGroupByIdRequest = {
    
    /**
    * Use group name instead of id
    * @type {string}
    * @memberof GroupsApiGetGroupById
    */
    readonly id: string
    
}

/**
 * Request parameters for listMembersJson operation in GroupsApi.
 * @export
 * @interface GroupsApiListMembersJsonRequest
 */
export type GroupsApiListMembersJsonRequest = {
    
    /**
    * Use group name instead of id
    * @type {string}
    * @memberof GroupsApiListMembersJson
    */
    readonly id: string
    
}

/**
 * Request parameters for removeMembers operation in GroupsApi.
 * @export
 * @interface GroupsApiRemoveMembersRequest
 */
export type GroupsApiRemoveMembersRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof GroupsApiRemoveMembers
    */
    readonly id: number
    
} & GroupsRemoveMembersRequest

/**
 * Request parameters for updateGroupByIdJson operation in GroupsApi.
 * @export
 * @interface GroupsApiUpdateGroupByIdJsonRequest
 */
export type GroupsApiUpdateGroupByIdJsonRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof GroupsApiUpdateGroupByIdJson
    */
    readonly id: number
    
} & GroupsUpdateGroupByIdJsonRequest

/**
 * GroupsApiGenerated - object-oriented interface
 * @export
 * @class GroupsApiGenerated
 * @extends {BaseAPI}
 */
export class GroupsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add group members
     * @param {GroupsApiAddMembersToGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public addMembersToGroup(requestParameters: GroupsApiAddMembersToGroupRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).addMembersToGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a group
     * @param {GroupsApiCreateNewGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public createNewGroup(requestParameters: GroupsApiCreateNewGroupRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).createNewGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a group
     * @param {GroupsApiDeleteGroupByIdJsonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public deleteGroupByIdJson(requestParameters: GroupsApiDeleteGroupByIdJsonRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).deleteGroupByIdJson(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a group
     * @param {GroupsApiGetGroupByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public getGroupById(requestParameters: GroupsApiGetGroupByIdRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getGroupById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public list(options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).list(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List group members
     * @param {GroupsApiListMembersJsonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public listMembersJson(requestParameters: GroupsApiListMembersJsonRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).listMembersJson(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove group members
     * @param {GroupsApiRemoveMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public removeMembers(requestParameters: GroupsApiRemoveMembersRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).removeMembers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a group
     * @param {GroupsApiUpdateGroupByIdJsonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiGenerated
     */
    public updateGroupByIdJson(requestParameters: GroupsApiUpdateGroupByIdJsonRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).updateGroupByIdJson(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
