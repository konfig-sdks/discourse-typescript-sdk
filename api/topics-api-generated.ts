/* tslint:disable */
/* eslint-disable */
/*
Discourse API Documentation

This page contains the documentation on how to use Discourse through API calls.

> Note: For any endpoints not listed you can follow the
[reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576)
guide to figure out how to use an API endpoint.

### Request Content-Type

The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`,
`multipart/form-data`, or `application/json`.

### Endpoint Names and Response Content-Type

Most API endpoints provide the same content as their HTML counterparts. For example
the URL `/categories` serves a list of categories, the `/categories.json` API provides the
same information in JSON format.

Instead of sending API requests to `/categories.json` you may also send them to `/categories`
and add an `Accept: application/json` header to the request to get the JSON response.
Sending requests with the `Accept` header is necessary if you want to use URLs
for related endpoints returned by the API, such as pagination URLs.
These URLs are returned without the `.json` prefix so you need to add the header in
order to get the correct response format.

### Authentication

Some endpoints do not require any authentication, pretty much anything else will
require you to be authenticated.

To become authenticated you will need to create an API Key from the admin panel.

Once you have your API Key you can pass it in along with your API Username
as an HTTP header like this:

```
curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\
-H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\
-H \"Api-Username: system\"
```

and this is how POST requests will look:

```
curl -X POST \"http://127.0.0.1:3000/categories\" \\
-H \"Content-Type: multipart/form-data;\" \\
-H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\
-H \"Api-Username: system\" \\
-F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\
-F \"color=49d9e9\" \\
-F \"text_color=f0fcfd\"
```

### Boolean values

If an endpoint accepts a boolean be sure to specify it as a lowercase
`true` or `false` value unless noted otherwise.


The version of the OpenAPI document: latest


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PostsCreateTopicPostMessageRequest } from '../models';
// @ts-ignore
import { PostsCreateTopicPostMessageResponse } from '../models';
// @ts-ignore
import { TopicsCreateTopicTimerRequest } from '../models';
// @ts-ignore
import { TopicsCreateTopicTimerResponse } from '../models';
// @ts-ignore
import { TopicsGetLatestTopicsResponse } from '../models';
// @ts-ignore
import { TopicsGetSingleTopicResponse } from '../models';
// @ts-ignore
import { TopicsGetSpecificPostsRequest } from '../models';
// @ts-ignore
import { TopicsGetSpecificPostsResponse } from '../models';
// @ts-ignore
import { TopicsGetTopTopicsByPeriodResponse } from '../models';
// @ts-ignore
import { TopicsSendInviteToTopicRequest } from '../models';
// @ts-ignore
import { TopicsSendInviteToTopicResponse } from '../models';
// @ts-ignore
import { TopicsSetNotificationLevelRequest } from '../models';
// @ts-ignore
import { TopicsSetNotificationLevelResponse } from '../models';
// @ts-ignore
import { TopicsUpdateStatusOfTopicRequest } from '../models';
// @ts-ignore
import { TopicsUpdateStatusOfTopicResponse } from '../models';
// @ts-ignore
import { TopicsUpdateTimestampJsonRequest } from '../models';
// @ts-ignore
import { TopicsUpdateTimestampJsonResponse } from '../models';
// @ts-ignore
import { TopicsUpdateTopicByIdJsonRequest } from '../models';
// @ts-ignore
import { TopicsUpdateTopicByIdJsonRequestTopic } from '../models';
// @ts-ignore
import { TopicsUpdateTopicByIdJsonResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TopicsApi - axios parameter creator
 * @export
 */
export const TopicsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new topic, a new post, or a private message
         * @param {PostsCreateTopicPostMessageRequest} [postsCreateTopicPostMessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTopicPostMessage: async (postsCreateTopicPostMessageRequest?: PostsCreateTopicPostMessageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/posts.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: postsCreateTopicPostMessageRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/posts.json',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(postsCreateTopicPostMessageRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create topic timer
         * @param {string} apiKey 
         * @param {string} apiUsername 
         * @param {string} id 
         * @param {TopicsCreateTopicTimerRequest} [topicsCreateTopicTimerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTopicTimer: async (apiKey: string, apiUsername: string, id: string, topicsCreateTopicTimerRequest?: TopicsCreateTopicTimerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('createTopicTimer', 'apiKey', apiKey)
            // verify required parameter 'apiUsername' is not null or undefined
            assertParamExists('createTopicTimer', 'apiUsername', apiUsername)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createTopicTimer', 'id', id)
            const localVarPath = `/t/{id}/timer.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['Api-Key'] = String(apiKey);
            }

            if (apiUsername != null) {
                localVarHeaderParameter['Api-Username'] = String(apiUsername);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: topicsCreateTopicTimerRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/t/{id}/timer.json',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(topicsCreateTopicTimerRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get topic by external_id
         * @param {string} externalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByExternalId: async (externalId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalId' is not null or undefined
            assertParamExists('getByExternalId', 'externalId', externalId)
            const localVarPath = `/t/external_id/{external_id}.json`
                .replace(`{${"external_id"}}`, encodeURIComponent(String(externalId !== undefined ? externalId : `-external_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/t/external_id/{external_id}.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the latest topics
         * @param {string} apiKey 
         * @param {string} apiUsername 
         * @param {string} [order] Enum: &#x60;default&#x60;, &#x60;created&#x60;, &#x60;activity&#x60;, &#x60;views&#x60;, &#x60;posts&#x60;, &#x60;category&#x60;, &#x60;likes&#x60;, &#x60;op_likes&#x60;, &#x60;posters&#x60;
         * @param {string} [ascending] Defaults to &#x60;desc&#x60;, add &#x60;ascending&#x3D;true&#x60; to sort asc
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestTopics: async (apiKey: string, apiUsername: string, order?: string, ascending?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('getLatestTopics', 'apiKey', apiKey)
            // verify required parameter 'apiUsername' is not null or undefined
            assertParamExists('getLatestTopics', 'apiUsername', apiUsername)
            const localVarPath = `/latest.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (ascending !== undefined) {
                localVarQueryParameter['ascending'] = ascending;
            }

            if (apiKey != null) {
                localVarHeaderParameter['Api-Key'] = String(apiKey);
            }

            if (apiUsername != null) {
                localVarHeaderParameter['Api-Username'] = String(apiUsername);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/latest.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a single topic
         * @param {string} apiKey 
         * @param {string} apiUsername 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleTopic: async (apiKey: string, apiUsername: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('getSingleTopic', 'apiKey', apiKey)
            // verify required parameter 'apiUsername' is not null or undefined
            assertParamExists('getSingleTopic', 'apiUsername', apiUsername)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSingleTopic', 'id', id)
            const localVarPath = `/t/{id}.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['Api-Key'] = String(apiKey);
            }

            if (apiUsername != null) {
                localVarHeaderParameter['Api-Username'] = String(apiUsername);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/t/{id}.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get specific posts from a topic
         * @param {string} apiKey 
         * @param {string} apiUsername 
         * @param {string} id 
         * @param {TopicsGetSpecificPostsRequest} [topicsGetSpecificPostsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificPosts: async (apiKey: string, apiUsername: string, id: string, topicsGetSpecificPostsRequest?: TopicsGetSpecificPostsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('getSpecificPosts', 'apiKey', apiKey)
            // verify required parameter 'apiUsername' is not null or undefined
            assertParamExists('getSpecificPosts', 'apiUsername', apiUsername)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSpecificPosts', 'id', id)
            const localVarPath = `/t/{id}/posts.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['Api-Key'] = String(apiKey);
            }

            if (apiUsername != null) {
                localVarHeaderParameter['Api-Username'] = String(apiUsername);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: topicsGetSpecificPostsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/t/{id}/posts.json',
                httpMethod: 'GET'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(topicsGetSpecificPostsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the top topics filtered by period
         * @param {string} apiKey 
         * @param {string} apiUsername 
         * @param {string} [period] Enum: &#x60;all&#x60;, &#x60;yearly&#x60;, &#x60;quarterly&#x60;, &#x60;monthly&#x60;, &#x60;weekly&#x60;, &#x60;daily&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopTopicsByPeriod: async (apiKey: string, apiUsername: string, period?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('getTopTopicsByPeriod', 'apiKey', apiKey)
            // verify required parameter 'apiUsername' is not null or undefined
            assertParamExists('getTopTopicsByPeriod', 'apiUsername', apiUsername)
            const localVarPath = `/top.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }

            if (apiKey != null) {
                localVarHeaderParameter['Api-Key'] = String(apiKey);
            }

            if (apiUsername != null) {
                localVarHeaderParameter['Api-Username'] = String(apiUsername);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/top.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a topic
         * @param {string} apiKey 
         * @param {string} apiUsername 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTopicById: async (apiKey: string, apiUsername: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('removeTopicById', 'apiKey', apiKey)
            // verify required parameter 'apiUsername' is not null or undefined
            assertParamExists('removeTopicById', 'apiUsername', apiUsername)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeTopicById', 'id', id)
            const localVarPath = `/t/{id}.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['Api-Key'] = String(apiKey);
            }

            if (apiUsername != null) {
                localVarHeaderParameter['Api-Username'] = String(apiUsername);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/t/{id}.json',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Invite to topic
         * @param {string} apiKey 
         * @param {string} apiUsername 
         * @param {string} id 
         * @param {TopicsSendInviteToTopicRequest} [topicsSendInviteToTopicRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendInviteToTopic: async (apiKey: string, apiUsername: string, id: string, topicsSendInviteToTopicRequest?: TopicsSendInviteToTopicRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('sendInviteToTopic', 'apiKey', apiKey)
            // verify required parameter 'apiUsername' is not null or undefined
            assertParamExists('sendInviteToTopic', 'apiUsername', apiUsername)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sendInviteToTopic', 'id', id)
            const localVarPath = `/t/{id}/invite.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['Api-Key'] = String(apiKey);
            }

            if (apiUsername != null) {
                localVarHeaderParameter['Api-Username'] = String(apiUsername);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: topicsSendInviteToTopicRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/t/{id}/invite.json',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(topicsSendInviteToTopicRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set notification level
         * @param {string} apiKey 
         * @param {string} apiUsername 
         * @param {string} id 
         * @param {TopicsSetNotificationLevelRequest} [topicsSetNotificationLevelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setNotificationLevel: async (apiKey: string, apiUsername: string, id: string, topicsSetNotificationLevelRequest?: TopicsSetNotificationLevelRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('setNotificationLevel', 'apiKey', apiKey)
            // verify required parameter 'apiUsername' is not null or undefined
            assertParamExists('setNotificationLevel', 'apiUsername', apiUsername)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('setNotificationLevel', 'id', id)
            const localVarPath = `/t/{id}/notifications.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['Api-Key'] = String(apiKey);
            }

            if (apiUsername != null) {
                localVarHeaderParameter['Api-Username'] = String(apiUsername);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: topicsSetNotificationLevelRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/t/{id}/notifications.json',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(topicsSetNotificationLevelRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bookmark topic
         * @param {string} apiKey 
         * @param {string} apiUsername 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBookmark: async (apiKey: string, apiUsername: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('updateBookmark', 'apiKey', apiKey)
            // verify required parameter 'apiUsername' is not null or undefined
            assertParamExists('updateBookmark', 'apiUsername', apiUsername)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateBookmark', 'id', id)
            const localVarPath = `/t/{id}/bookmark.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['Api-Key'] = String(apiKey);
            }

            if (apiUsername != null) {
                localVarHeaderParameter['Api-Username'] = String(apiUsername);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/t/{id}/bookmark.json',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update the status of a topic
         * @param {string} apiKey 
         * @param {string} apiUsername 
         * @param {string} id 
         * @param {TopicsUpdateStatusOfTopicRequest} [topicsUpdateStatusOfTopicRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatusOfTopic: async (apiKey: string, apiUsername: string, id: string, topicsUpdateStatusOfTopicRequest?: TopicsUpdateStatusOfTopicRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('updateStatusOfTopic', 'apiKey', apiKey)
            // verify required parameter 'apiUsername' is not null or undefined
            assertParamExists('updateStatusOfTopic', 'apiUsername', apiUsername)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateStatusOfTopic', 'id', id)
            const localVarPath = `/t/{id}/status.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['Api-Key'] = String(apiKey);
            }

            if (apiUsername != null) {
                localVarHeaderParameter['Api-Username'] = String(apiUsername);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: topicsUpdateStatusOfTopicRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/t/{id}/status.json',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(topicsUpdateStatusOfTopicRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update topic timestamp
         * @param {string} apiKey 
         * @param {string} apiUsername 
         * @param {string} id 
         * @param {TopicsUpdateTimestampJsonRequest} [topicsUpdateTimestampJsonRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTimestampJson: async (apiKey: string, apiUsername: string, id: string, topicsUpdateTimestampJsonRequest?: TopicsUpdateTimestampJsonRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('updateTimestampJson', 'apiKey', apiKey)
            // verify required parameter 'apiUsername' is not null or undefined
            assertParamExists('updateTimestampJson', 'apiUsername', apiUsername)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTimestampJson', 'id', id)
            const localVarPath = `/t/{id}/change-timestamp.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['Api-Key'] = String(apiKey);
            }

            if (apiUsername != null) {
                localVarHeaderParameter['Api-Username'] = String(apiUsername);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: topicsUpdateTimestampJsonRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/t/{id}/change-timestamp.json',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(topicsUpdateTimestampJsonRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a topic
         * @param {string} apiKey 
         * @param {string} apiUsername 
         * @param {string} id 
         * @param {TopicsUpdateTopicByIdJsonRequest} [topicsUpdateTopicByIdJsonRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTopicByIdJson: async (apiKey: string, apiUsername: string, id: string, topicsUpdateTopicByIdJsonRequest?: TopicsUpdateTopicByIdJsonRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('updateTopicByIdJson', 'apiKey', apiKey)
            // verify required parameter 'apiUsername' is not null or undefined
            assertParamExists('updateTopicByIdJson', 'apiUsername', apiUsername)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTopicByIdJson', 'id', id)
            const localVarPath = `/t/-/{id}.json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['Api-Key'] = String(apiKey);
            }

            if (apiUsername != null) {
                localVarHeaderParameter['Api-Username'] = String(apiUsername);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: topicsUpdateTopicByIdJsonRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/t/-/{id}.json',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(topicsUpdateTopicByIdJsonRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TopicsApi - functional programming interface
 * @export
 */
export const TopicsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TopicsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a new topic, a new post, or a private message
         * @param {TopicsApiCreateTopicPostMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTopicPostMessage(requestParameters: TopicsApiCreateTopicPostMessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostsCreateTopicPostMessageResponse>> {
            const postsCreateTopicPostMessageRequest: PostsCreateTopicPostMessageRequest = {
                title: requestParameters.title,
                raw: requestParameters.raw,
                topic_id: requestParameters.topic_id,
                category: requestParameters.category,
                target_recipients: requestParameters.target_recipients,
                target_usernames: requestParameters.target_usernames,
                archetype: requestParameters.archetype,
                created_at: requestParameters.created_at,
                reply_to_post_number: requestParameters.reply_to_post_number,
                embed_url: requestParameters.embed_url,
                external_id: requestParameters.external_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTopicPostMessage(postsCreateTopicPostMessageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create topic timer
         * @param {TopicsApiCreateTopicTimerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTopicTimer(requestParameters: TopicsApiCreateTopicTimerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopicsCreateTopicTimerResponse>> {
            const topicsCreateTopicTimerRequest: TopicsCreateTopicTimerRequest = {
                time: requestParameters.time,
                status_type: requestParameters.status_type,
                based_on_last_post: requestParameters.based_on_last_post,
                category_id: requestParameters.category_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTopicTimer(requestParameters.apiKey, requestParameters.apiUsername, requestParameters.id, topicsCreateTopicTimerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get topic by external_id
         * @param {TopicsApiGetByExternalIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByExternalId(requestParameters: TopicsApiGetByExternalIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByExternalId(requestParameters.externalId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the latest topics
         * @param {TopicsApiGetLatestTopicsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestTopics(requestParameters: TopicsApiGetLatestTopicsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopicsGetLatestTopicsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLatestTopics(requestParameters.apiKey, requestParameters.apiUsername, requestParameters.order, requestParameters.ascending, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a single topic
         * @param {TopicsApiGetSingleTopicRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleTopic(requestParameters: TopicsApiGetSingleTopicRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopicsGetSingleTopicResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleTopic(requestParameters.apiKey, requestParameters.apiUsername, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get specific posts from a topic
         * @param {TopicsApiGetSpecificPostsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificPosts(requestParameters: TopicsApiGetSpecificPostsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopicsGetSpecificPostsResponse>> {
            const topicsGetSpecificPostsRequest: TopicsGetSpecificPostsRequest = {
                post_ids[]: requestParameters.post_ids[]
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificPosts(requestParameters.apiKey, requestParameters.apiUsername, requestParameters.id, topicsGetSpecificPostsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the top topics filtered by period
         * @param {TopicsApiGetTopTopicsByPeriodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopTopicsByPeriod(requestParameters: TopicsApiGetTopTopicsByPeriodRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopicsGetTopTopicsByPeriodResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopTopicsByPeriod(requestParameters.apiKey, requestParameters.apiUsername, requestParameters.period, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove a topic
         * @param {TopicsApiRemoveTopicByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeTopicById(requestParameters: TopicsApiRemoveTopicByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeTopicById(requestParameters.apiKey, requestParameters.apiUsername, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Invite to topic
         * @param {TopicsApiSendInviteToTopicRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendInviteToTopic(requestParameters: TopicsApiSendInviteToTopicRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopicsSendInviteToTopicResponse>> {
            const topicsSendInviteToTopicRequest: TopicsSendInviteToTopicRequest = {
                user: requestParameters.user,
                email: requestParameters.email
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendInviteToTopic(requestParameters.apiKey, requestParameters.apiUsername, requestParameters.id, topicsSendInviteToTopicRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set notification level
         * @param {TopicsApiSetNotificationLevelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setNotificationLevel(requestParameters: TopicsApiSetNotificationLevelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopicsSetNotificationLevelResponse>> {
            const topicsSetNotificationLevelRequest: TopicsSetNotificationLevelRequest = {
                notification_level: requestParameters.notification_level
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setNotificationLevel(requestParameters.apiKey, requestParameters.apiUsername, requestParameters.id, topicsSetNotificationLevelRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Bookmark topic
         * @param {TopicsApiUpdateBookmarkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBookmark(requestParameters: TopicsApiUpdateBookmarkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBookmark(requestParameters.apiKey, requestParameters.apiUsername, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update the status of a topic
         * @param {TopicsApiUpdateStatusOfTopicRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStatusOfTopic(requestParameters: TopicsApiUpdateStatusOfTopicRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopicsUpdateStatusOfTopicResponse>> {
            const topicsUpdateStatusOfTopicRequest: TopicsUpdateStatusOfTopicRequest = {
                status: requestParameters.status,
                enabled: requestParameters.enabled,
                until: requestParameters.until
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStatusOfTopic(requestParameters.apiKey, requestParameters.apiUsername, requestParameters.id, topicsUpdateStatusOfTopicRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update topic timestamp
         * @param {TopicsApiUpdateTimestampJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTimestampJson(requestParameters: TopicsApiUpdateTimestampJsonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopicsUpdateTimestampJsonResponse>> {
            const topicsUpdateTimestampJsonRequest: TopicsUpdateTimestampJsonRequest = {
                timestamp: requestParameters.timestamp
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTimestampJson(requestParameters.apiKey, requestParameters.apiUsername, requestParameters.id, topicsUpdateTimestampJsonRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a topic
         * @param {TopicsApiUpdateTopicByIdJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTopicByIdJson(requestParameters: TopicsApiUpdateTopicByIdJsonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopicsUpdateTopicByIdJsonResponse>> {
            const topicsUpdateTopicByIdJsonRequest: TopicsUpdateTopicByIdJsonRequest = {
                topic: requestParameters.topic
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTopicByIdJson(requestParameters.apiKey, requestParameters.apiUsername, requestParameters.id, topicsUpdateTopicByIdJsonRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TopicsApi - factory interface
 * @export
 */
export const TopicsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TopicsApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a new topic, a new post, or a private message
         * @param {TopicsApiCreateTopicPostMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTopicPostMessage(requestParameters: TopicsApiCreateTopicPostMessageRequest, options?: AxiosRequestConfig): AxiosPromise<PostsCreateTopicPostMessageResponse> {
            return localVarFp.createTopicPostMessage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create topic timer
         * @param {TopicsApiCreateTopicTimerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTopicTimer(requestParameters: TopicsApiCreateTopicTimerRequest, options?: AxiosRequestConfig): AxiosPromise<TopicsCreateTopicTimerResponse> {
            return localVarFp.createTopicTimer(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get topic by external_id
         * @param {TopicsApiGetByExternalIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByExternalId(requestParameters: TopicsApiGetByExternalIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getByExternalId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the latest topics
         * @param {TopicsApiGetLatestTopicsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestTopics(requestParameters: TopicsApiGetLatestTopicsRequest, options?: AxiosRequestConfig): AxiosPromise<TopicsGetLatestTopicsResponse> {
            return localVarFp.getLatestTopics(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a single topic
         * @param {TopicsApiGetSingleTopicRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleTopic(requestParameters: TopicsApiGetSingleTopicRequest, options?: AxiosRequestConfig): AxiosPromise<TopicsGetSingleTopicResponse> {
            return localVarFp.getSingleTopic(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get specific posts from a topic
         * @param {TopicsApiGetSpecificPostsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificPosts(requestParameters: TopicsApiGetSpecificPostsRequest, options?: AxiosRequestConfig): AxiosPromise<TopicsGetSpecificPostsResponse> {
            return localVarFp.getSpecificPosts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the top topics filtered by period
         * @param {TopicsApiGetTopTopicsByPeriodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopTopicsByPeriod(requestParameters: TopicsApiGetTopTopicsByPeriodRequest, options?: AxiosRequestConfig): AxiosPromise<TopicsGetTopTopicsByPeriodResponse> {
            return localVarFp.getTopTopicsByPeriod(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a topic
         * @param {TopicsApiRemoveTopicByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTopicById(requestParameters: TopicsApiRemoveTopicByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeTopicById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Invite to topic
         * @param {TopicsApiSendInviteToTopicRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendInviteToTopic(requestParameters: TopicsApiSendInviteToTopicRequest, options?: AxiosRequestConfig): AxiosPromise<TopicsSendInviteToTopicResponse> {
            return localVarFp.sendInviteToTopic(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set notification level
         * @param {TopicsApiSetNotificationLevelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setNotificationLevel(requestParameters: TopicsApiSetNotificationLevelRequest, options?: AxiosRequestConfig): AxiosPromise<TopicsSetNotificationLevelResponse> {
            return localVarFp.setNotificationLevel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Bookmark topic
         * @param {TopicsApiUpdateBookmarkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBookmark(requestParameters: TopicsApiUpdateBookmarkRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateBookmark(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update the status of a topic
         * @param {TopicsApiUpdateStatusOfTopicRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatusOfTopic(requestParameters: TopicsApiUpdateStatusOfTopicRequest, options?: AxiosRequestConfig): AxiosPromise<TopicsUpdateStatusOfTopicResponse> {
            return localVarFp.updateStatusOfTopic(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update topic timestamp
         * @param {TopicsApiUpdateTimestampJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTimestampJson(requestParameters: TopicsApiUpdateTimestampJsonRequest, options?: AxiosRequestConfig): AxiosPromise<TopicsUpdateTimestampJsonResponse> {
            return localVarFp.updateTimestampJson(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a topic
         * @param {TopicsApiUpdateTopicByIdJsonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTopicByIdJson(requestParameters: TopicsApiUpdateTopicByIdJsonRequest, options?: AxiosRequestConfig): AxiosPromise<TopicsUpdateTopicByIdJsonResponse> {
            return localVarFp.updateTopicByIdJson(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createTopicPostMessage operation in TopicsApi.
 * @export
 * @interface TopicsApiCreateTopicPostMessageRequest
 */
export type TopicsApiCreateTopicPostMessageRequest = {
    
} & PostsCreateTopicPostMessageRequest

/**
 * Request parameters for createTopicTimer operation in TopicsApi.
 * @export
 * @interface TopicsApiCreateTopicTimerRequest
 */
export type TopicsApiCreateTopicTimerRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiCreateTopicTimer
    */
    readonly apiKey: string
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiCreateTopicTimer
    */
    readonly apiUsername: string
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiCreateTopicTimer
    */
    readonly id: string
    
} & TopicsCreateTopicTimerRequest

/**
 * Request parameters for getByExternalId operation in TopicsApi.
 * @export
 * @interface TopicsApiGetByExternalIdRequest
 */
export type TopicsApiGetByExternalIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiGetByExternalId
    */
    readonly externalId: string
    
}

/**
 * Request parameters for getLatestTopics operation in TopicsApi.
 * @export
 * @interface TopicsApiGetLatestTopicsRequest
 */
export type TopicsApiGetLatestTopicsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiGetLatestTopics
    */
    readonly apiKey: string
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiGetLatestTopics
    */
    readonly apiUsername: string
    
    /**
    * Enum: `default`, `created`, `activity`, `views`, `posts`, `category`, `likes`, `op_likes`, `posters`
    * @type {string}
    * @memberof TopicsApiGetLatestTopics
    */
    readonly order?: string
    
    /**
    * Defaults to `desc`, add `ascending=true` to sort asc
    * @type {string}
    * @memberof TopicsApiGetLatestTopics
    */
    readonly ascending?: string
    
}

/**
 * Request parameters for getSingleTopic operation in TopicsApi.
 * @export
 * @interface TopicsApiGetSingleTopicRequest
 */
export type TopicsApiGetSingleTopicRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiGetSingleTopic
    */
    readonly apiKey: string
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiGetSingleTopic
    */
    readonly apiUsername: string
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiGetSingleTopic
    */
    readonly id: string
    
}

/**
 * Request parameters for getSpecificPosts operation in TopicsApi.
 * @export
 * @interface TopicsApiGetSpecificPostsRequest
 */
export type TopicsApiGetSpecificPostsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiGetSpecificPosts
    */
    readonly apiKey: string
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiGetSpecificPosts
    */
    readonly apiUsername: string
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiGetSpecificPosts
    */
    readonly id: string
    
} & TopicsGetSpecificPostsRequest

/**
 * Request parameters for getTopTopicsByPeriod operation in TopicsApi.
 * @export
 * @interface TopicsApiGetTopTopicsByPeriodRequest
 */
export type TopicsApiGetTopTopicsByPeriodRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiGetTopTopicsByPeriod
    */
    readonly apiKey: string
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiGetTopTopicsByPeriod
    */
    readonly apiUsername: string
    
    /**
    * Enum: `all`, `yearly`, `quarterly`, `monthly`, `weekly`, `daily`
    * @type {string}
    * @memberof TopicsApiGetTopTopicsByPeriod
    */
    readonly period?: string
    
}

/**
 * Request parameters for removeTopicById operation in TopicsApi.
 * @export
 * @interface TopicsApiRemoveTopicByIdRequest
 */
export type TopicsApiRemoveTopicByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiRemoveTopicById
    */
    readonly apiKey: string
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiRemoveTopicById
    */
    readonly apiUsername: string
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiRemoveTopicById
    */
    readonly id: string
    
}

/**
 * Request parameters for sendInviteToTopic operation in TopicsApi.
 * @export
 * @interface TopicsApiSendInviteToTopicRequest
 */
export type TopicsApiSendInviteToTopicRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiSendInviteToTopic
    */
    readonly apiKey: string
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiSendInviteToTopic
    */
    readonly apiUsername: string
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiSendInviteToTopic
    */
    readonly id: string
    
} & TopicsSendInviteToTopicRequest

/**
 * Request parameters for setNotificationLevel operation in TopicsApi.
 * @export
 * @interface TopicsApiSetNotificationLevelRequest
 */
export type TopicsApiSetNotificationLevelRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiSetNotificationLevel
    */
    readonly apiKey: string
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiSetNotificationLevel
    */
    readonly apiUsername: string
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiSetNotificationLevel
    */
    readonly id: string
    
} & TopicsSetNotificationLevelRequest

/**
 * Request parameters for updateBookmark operation in TopicsApi.
 * @export
 * @interface TopicsApiUpdateBookmarkRequest
 */
export type TopicsApiUpdateBookmarkRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiUpdateBookmark
    */
    readonly apiKey: string
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiUpdateBookmark
    */
    readonly apiUsername: string
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiUpdateBookmark
    */
    readonly id: string
    
}

/**
 * Request parameters for updateStatusOfTopic operation in TopicsApi.
 * @export
 * @interface TopicsApiUpdateStatusOfTopicRequest
 */
export type TopicsApiUpdateStatusOfTopicRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiUpdateStatusOfTopic
    */
    readonly apiKey: string
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiUpdateStatusOfTopic
    */
    readonly apiUsername: string
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiUpdateStatusOfTopic
    */
    readonly id: string
    
} & TopicsUpdateStatusOfTopicRequest

/**
 * Request parameters for updateTimestampJson operation in TopicsApi.
 * @export
 * @interface TopicsApiUpdateTimestampJsonRequest
 */
export type TopicsApiUpdateTimestampJsonRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiUpdateTimestampJson
    */
    readonly apiKey: string
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiUpdateTimestampJson
    */
    readonly apiUsername: string
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiUpdateTimestampJson
    */
    readonly id: string
    
} & TopicsUpdateTimestampJsonRequest

/**
 * Request parameters for updateTopicByIdJson operation in TopicsApi.
 * @export
 * @interface TopicsApiUpdateTopicByIdJsonRequest
 */
export type TopicsApiUpdateTopicByIdJsonRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiUpdateTopicByIdJson
    */
    readonly apiKey: string
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiUpdateTopicByIdJson
    */
    readonly apiUsername: string
    
    /**
    * 
    * @type {string}
    * @memberof TopicsApiUpdateTopicByIdJson
    */
    readonly id: string
    
} & TopicsUpdateTopicByIdJsonRequest

/**
 * TopicsApiGenerated - object-oriented interface
 * @export
 * @class TopicsApiGenerated
 * @extends {BaseAPI}
 */
export class TopicsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Creates a new topic, a new post, or a private message
     * @param {TopicsApiCreateTopicPostMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApiGenerated
     */
    public createTopicPostMessage(requestParameters: TopicsApiCreateTopicPostMessageRequest, options?: AxiosRequestConfig) {
        return TopicsApiFp(this.configuration).createTopicPostMessage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create topic timer
     * @param {TopicsApiCreateTopicTimerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApiGenerated
     */
    public createTopicTimer(requestParameters: TopicsApiCreateTopicTimerRequest, options?: AxiosRequestConfig) {
        return TopicsApiFp(this.configuration).createTopicTimer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get topic by external_id
     * @param {TopicsApiGetByExternalIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApiGenerated
     */
    public getByExternalId(requestParameters: TopicsApiGetByExternalIdRequest, options?: AxiosRequestConfig) {
        return TopicsApiFp(this.configuration).getByExternalId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the latest topics
     * @param {TopicsApiGetLatestTopicsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApiGenerated
     */
    public getLatestTopics(requestParameters: TopicsApiGetLatestTopicsRequest, options?: AxiosRequestConfig) {
        return TopicsApiFp(this.configuration).getLatestTopics(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a single topic
     * @param {TopicsApiGetSingleTopicRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApiGenerated
     */
    public getSingleTopic(requestParameters: TopicsApiGetSingleTopicRequest, options?: AxiosRequestConfig) {
        return TopicsApiFp(this.configuration).getSingleTopic(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get specific posts from a topic
     * @param {TopicsApiGetSpecificPostsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApiGenerated
     */
    public getSpecificPosts(requestParameters: TopicsApiGetSpecificPostsRequest, options?: AxiosRequestConfig) {
        return TopicsApiFp(this.configuration).getSpecificPosts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the top topics filtered by period
     * @param {TopicsApiGetTopTopicsByPeriodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApiGenerated
     */
    public getTopTopicsByPeriod(requestParameters: TopicsApiGetTopTopicsByPeriodRequest, options?: AxiosRequestConfig) {
        return TopicsApiFp(this.configuration).getTopTopicsByPeriod(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a topic
     * @param {TopicsApiRemoveTopicByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApiGenerated
     */
    public removeTopicById(requestParameters: TopicsApiRemoveTopicByIdRequest, options?: AxiosRequestConfig) {
        return TopicsApiFp(this.configuration).removeTopicById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Invite to topic
     * @param {TopicsApiSendInviteToTopicRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApiGenerated
     */
    public sendInviteToTopic(requestParameters: TopicsApiSendInviteToTopicRequest, options?: AxiosRequestConfig) {
        return TopicsApiFp(this.configuration).sendInviteToTopic(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set notification level
     * @param {TopicsApiSetNotificationLevelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApiGenerated
     */
    public setNotificationLevel(requestParameters: TopicsApiSetNotificationLevelRequest, options?: AxiosRequestConfig) {
        return TopicsApiFp(this.configuration).setNotificationLevel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Bookmark topic
     * @param {TopicsApiUpdateBookmarkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApiGenerated
     */
    public updateBookmark(requestParameters: TopicsApiUpdateBookmarkRequest, options?: AxiosRequestConfig) {
        return TopicsApiFp(this.configuration).updateBookmark(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update the status of a topic
     * @param {TopicsApiUpdateStatusOfTopicRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApiGenerated
     */
    public updateStatusOfTopic(requestParameters: TopicsApiUpdateStatusOfTopicRequest, options?: AxiosRequestConfig) {
        return TopicsApiFp(this.configuration).updateStatusOfTopic(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update topic timestamp
     * @param {TopicsApiUpdateTimestampJsonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApiGenerated
     */
    public updateTimestampJson(requestParameters: TopicsApiUpdateTimestampJsonRequest, options?: AxiosRequestConfig) {
        return TopicsApiFp(this.configuration).updateTimestampJson(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a topic
     * @param {TopicsApiUpdateTopicByIdJsonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApiGenerated
     */
    public updateTopicByIdJson(requestParameters: TopicsApiUpdateTopicByIdJsonRequest, options?: AxiosRequestConfig) {
        return TopicsApiFp(this.configuration).updateTopicByIdJson(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
